
CAN_Feedback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005994  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005b1c  08005b1c  00015b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b34  08005b34  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b34  08005b34  00015b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b3c  08005b3c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b3c  08005b3c  00015b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001d8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000248  20000248  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000109ed  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000201f  00000000  00000000  00030a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  00032ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000db8  00000000  00000000  00033920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000214a5  00000000  00000000  000346d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fcc6  00000000  00000000  00055b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce107  00000000  00000000  00065843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013394a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ed4  00000000  00000000  0013399c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b04 	.word	0x08005b04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005b04 	.word	0x08005b04

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b974 	b.w	8000d04 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468e      	mov	lr, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14d      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4694      	mov	ip, r2
 8000a46:	d969      	bls.n	8000b1c <__udivmoddi4+0xe8>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b152      	cbz	r2, 8000a64 <__udivmoddi4+0x30>
 8000a4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a52:	f1c2 0120 	rsb	r1, r2, #32
 8000a56:	fa20 f101 	lsr.w	r1, r0, r1
 8000a5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a62:	4094      	lsls	r4, r2
 8000a64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a68:	0c21      	lsrs	r1, r4, #16
 8000a6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a6e:	fa1f f78c 	uxth.w	r7, ip
 8000a72:	fb08 e316 	mls	r3, r8, r6, lr
 8000a76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a7a:	fb06 f107 	mul.w	r1, r6, r7
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8a:	f080 811f 	bcs.w	8000ccc <__udivmoddi4+0x298>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 811c 	bls.w	8000ccc <__udivmoddi4+0x298>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa0:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa8:	fb00 f707 	mul.w	r7, r0, r7
 8000aac:	42a7      	cmp	r7, r4
 8000aae:	d90a      	bls.n	8000ac6 <__udivmoddi4+0x92>
 8000ab0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab8:	f080 810a 	bcs.w	8000cd0 <__udivmoddi4+0x29c>
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	f240 8107 	bls.w	8000cd0 <__udivmoddi4+0x29c>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aca:	1be4      	subs	r4, r4, r7
 8000acc:	2600      	movs	r6, #0
 8000ace:	b11d      	cbz	r5, 8000ad8 <__udivmoddi4+0xa4>
 8000ad0:	40d4      	lsrs	r4, r2
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d909      	bls.n	8000af6 <__udivmoddi4+0xc2>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	f000 80ef 	beq.w	8000cc6 <__udivmoddi4+0x292>
 8000ae8:	2600      	movs	r6, #0
 8000aea:	e9c5 0100 	strd	r0, r1, [r5]
 8000aee:	4630      	mov	r0, r6
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	fab3 f683 	clz	r6, r3
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d14a      	bne.n	8000b94 <__udivmoddi4+0x160>
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xd4>
 8000b02:	4282      	cmp	r2, r0
 8000b04:	f200 80f9 	bhi.w	8000cfa <__udivmoddi4+0x2c6>
 8000b08:	1a84      	subs	r4, r0, r2
 8000b0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	469e      	mov	lr, r3
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d0e0      	beq.n	8000ad8 <__udivmoddi4+0xa4>
 8000b16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b1a:	e7dd      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000b1c:	b902      	cbnz	r2, 8000b20 <__udivmoddi4+0xec>
 8000b1e:	deff      	udf	#255	; 0xff
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	f040 8092 	bne.w	8000c4e <__udivmoddi4+0x21a>
 8000b2a:	eba1 010c 	sub.w	r1, r1, ip
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2601      	movs	r6, #1
 8000b38:	0c20      	lsrs	r0, r4, #16
 8000b3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b46:	fb0e f003 	mul.w	r0, lr, r3
 8000b4a:	4288      	cmp	r0, r1
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x12c>
 8000b4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x12a>
 8000b58:	4288      	cmp	r0, r1
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2c0>
 8000b5e:	4643      	mov	r3, r8
 8000b60:	1a09      	subs	r1, r1, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b68:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x156>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x154>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2ca>
 8000b88:	4608      	mov	r0, r1
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b92:	e79c      	b.n	8000ace <__udivmoddi4+0x9a>
 8000b94:	f1c6 0720 	rsb	r7, r6, #32
 8000b98:	40b3      	lsls	r3, r6
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ba6:	fa01 f306 	lsl.w	r3, r1, r6
 8000baa:	431c      	orrs	r4, r3
 8000bac:	40f9      	lsrs	r1, r7
 8000bae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bba:	0c20      	lsrs	r0, r4, #16
 8000bbc:	fa1f fe8c 	uxth.w	lr, ip
 8000bc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bcc:	4288      	cmp	r0, r1
 8000bce:	fa02 f206 	lsl.w	r2, r2, r6
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b8>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4461      	add	r1, ip
 8000bec:	1a09      	subs	r1, r1, r0
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c00:	458e      	cmp	lr, r1
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1e2>
 8000c04:	eb1c 0101 	adds.w	r1, ip, r1
 8000c08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c0e:	458e      	cmp	lr, r1
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4461      	add	r1, ip
 8000c16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c1e:	eba1 010e 	sub.w	r1, r1, lr
 8000c22:	42a1      	cmp	r1, r4
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46a6      	mov	lr, r4
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c2c:	b15d      	cbz	r5, 8000c46 <__udivmoddi4+0x212>
 8000c2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c32:	eb61 010e 	sbc.w	r1, r1, lr
 8000c36:	fa01 f707 	lsl.w	r7, r1, r7
 8000c3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c3e:	40f1      	lsrs	r1, r6
 8000c40:	431f      	orrs	r7, r3
 8000c42:	e9c5 7100 	strd	r7, r1, [r5]
 8000c46:	2600      	movs	r6, #0
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	f1c2 0320 	rsb	r3, r2, #32
 8000c52:	40d8      	lsrs	r0, r3
 8000c54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c58:	fa21 f303 	lsr.w	r3, r1, r3
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4301      	orrs	r1, r0
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c70:	0c0b      	lsrs	r3, r1, #16
 8000c72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c76:	fb00 f60e 	mul.w	r6, r0, lr
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x260>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b8>
 8000c8c:	429e      	cmp	r6, r3
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b8>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4463      	add	r3, ip
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	b289      	uxth	r1, r1
 8000c98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x28a>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cba:	3e02      	subs	r6, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	1ac9      	subs	r1, r1, r3
 8000cc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0x104>
 8000cc6:	462e      	mov	r6, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e705      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e3      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6f8      	b.n	8000ac6 <__udivmoddi4+0x92>
 8000cd4:	454b      	cmp	r3, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f8>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f8>
 8000ce4:	4646      	mov	r6, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x28a>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1e2>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b8>
 8000cf4:	3b02      	subs	r3, #2
 8000cf6:	4461      	add	r1, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x12c>
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	e709      	b.n	8000b12 <__udivmoddi4+0xde>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x156>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <pidController>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float pidController(pidVar *pid, int error, int errorThresh, int position) {
 8000d08:	b480      	push	{r7}
 8000d0a:	b087      	sub	sp, #28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	603b      	str	r3, [r7, #0]
	if (abs(error) > errorThresh)
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bfb8      	it	lt
 8000d1c:	425b      	neglt	r3, r3
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	da06      	bge.n	8000d32 <pidController+0x2a>
		pid->sum += error;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	441a      	add	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	e00d      	b.n	8000d4e <pidController+0x46>
	else if (abs(error) > errorThresh && !pid->speedControl)
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	bfb8      	it	lt
 8000d38:	425b      	neglt	r3, r3
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	da06      	bge.n	8000d4e <pidController+0x46>
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <pidController+0x46>
		pid->sum = 0;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
	float finalVal = pid->kp * error + pid->ki * pid->sum
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	ed93 7a00 	vldr	s14, [r3]
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	edd3 6a02 	vldr	s13, [r3, #8]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	ee07 3a90 	vmov	s15, r3
 8000d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d78:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ pid->kd * (error - pid->lastError);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	ee07 3a90 	vmov	s15, r3
 8000d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d92:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float finalVal = pid->kp * error + pid->ki * pid->sum
 8000d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d9a:	edc7 7a05 	vstr	s15, [r7, #20]
	pid->lastError = error;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	611a      	str	r2, [r3, #16]
	if (finalVal > pid->hardLimitMax)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	ee07 3a90 	vmov	s15, r3
 8000dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000db0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dbc:	dd06      	ble.n	8000dcc <pidController+0xc4>
		return pid->hardLimitMax;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	ee07 3a90 	vmov	s15, r3
 8000dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dca:	e015      	b.n	8000df8 <pidController+0xf0>
	else if (finalVal < pid->hardLimitMin)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	ee07 3a90 	vmov	s15, r3
 8000dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dd8:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ddc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de4:	d506      	bpl.n	8000df4 <pidController+0xec>
		return pid->hardLimitMin;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	ee07 3a90 	vmov	s15, r3
 8000dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000df2:	e001      	b.n	8000df8 <pidController+0xf0>
	return finalVal;
 8000df4:	edd7 7a05 	vldr	s15, [r7, #20]
}
 8000df8:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfc:	371c      	adds	r7, #28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <Steer_left>:

void Steer_left(int angle) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e10:	2104      	movs	r1, #4
 8000e12:	4807      	ldr	r0, [pc, #28]	; (8000e30 <Steer_left+0x28>)
 8000e14:	f002 ff48 	bl	8003ca8 <HAL_TIM_PWM_Start>
	htim2.Instance->CCR2 = angle;
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <Steer_left+0x28>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	639a      	str	r2, [r3, #56]	; 0x38
	htim2.Instance->CCR1 = 0;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <Steer_left+0x28>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2200      	movs	r2, #0
 8000e26:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000110 	.word	0x20000110

08000e34 <Steer_right>:

void Steer_right(int angle) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4807      	ldr	r0, [pc, #28]	; (8000e5c <Steer_right+0x28>)
 8000e40:	f002 ff32 	bl	8003ca8 <HAL_TIM_PWM_Start>
	htim2.Instance->CCR1 = angle;
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <Steer_right+0x28>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	635a      	str	r2, [r3, #52]	; 0x34
	htim2.Instance->CCR2 = 0;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <Steer_right+0x28>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2200      	movs	r2, #0
 8000e52:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000110 	.word	0x20000110

08000e60 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_FILTER_FIFO0, &Rxheader, Rxmsg);
 8000e68:	4ba0      	ldr	r3, [pc, #640]	; (80010ec <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8000e6a:	4aa1      	ldr	r2, [pc, #644]	; (80010f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	48a1      	ldr	r0, [pc, #644]	; (80010f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8000e70:	f001 fa1e 	bl	80022b0 <HAL_CAN_GetRxMessage>
	if (Rxheader.ExtId == 0x0CF11E06) {
 8000e74:	4b9e      	ldr	r3, [pc, #632]	; (80010f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	4a9f      	ldr	r2, [pc, #636]	; (80010f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	f040 8088 	bne.w	8000f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>
		speedlsbl = Rxmsg[0];
 8000e80:	4b9a      	ldr	r3, [pc, #616]	; (80010ec <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	4b9d      	ldr	r3, [pc, #628]	; (80010fc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8000e86:	701a      	strb	r2, [r3, #0]
		speedmsbl = Rxmsg[1];
 8000e88:	4b98      	ldr	r3, [pc, #608]	; (80010ec <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8000e8a:	785a      	ldrb	r2, [r3, #1]
 8000e8c:	4b9c      	ldr	r3, [pc, #624]	; (8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8000e8e:	701a      	strb	r2, [r3, #0]
		voltagelsbl = Rxmsg[4];
 8000e90:	4b96      	ldr	r3, [pc, #600]	; (80010ec <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8000e92:	791a      	ldrb	r2, [r3, #4]
 8000e94:	4b9b      	ldr	r3, [pc, #620]	; (8001104 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8000e96:	701a      	strb	r2, [r3, #0]
		voltagemsbl = Rxmsg[5];
 8000e98:	4b94      	ldr	r3, [pc, #592]	; (80010ec <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8000e9a:	795a      	ldrb	r2, [r3, #5]
 8000e9c:	4b9a      	ldr	r3, [pc, #616]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8000e9e:	701a      	strb	r2, [r3, #0]
		currentlsbl = Rxmsg[2];
 8000ea0:	4b92      	ldr	r3, [pc, #584]	; (80010ec <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8000ea2:	789a      	ldrb	r2, [r3, #2]
 8000ea4:	4b99      	ldr	r3, [pc, #612]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8000ea6:	701a      	strb	r2, [r3, #0]
		currentmsbl = Rxmsg[3];
 8000ea8:	4b90      	ldr	r3, [pc, #576]	; (80010ec <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8000eaa:	78da      	ldrb	r2, [r3, #3]
 8000eac:	4b98      	ldr	r3, [pc, #608]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8000eae:	701a      	strb	r2, [r3, #0]
		speedl = (256) * speedmsbl + speedlsbl;
 8000eb0:	4b93      	ldr	r3, [pc, #588]	; (8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	4b90      	ldr	r3, [pc, #576]	; (80010fc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	4413      	add	r3, r2
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	4b93      	ldr	r3, [pc, #588]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000ec6:	801a      	strh	r2, [r3, #0]
		voltagel = ((256) * voltagemsbl + voltagelsbl) / 10;
 8000ec8:	4b8f      	ldr	r3, [pc, #572]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	4a8d      	ldr	r2, [pc, #564]	; (8001104 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8000ed0:	7812      	ldrb	r2, [r2, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a90      	ldr	r2, [pc, #576]	; (8001118 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8000ed6:	fb82 1203 	smull	r1, r2, r2, r3
 8000eda:	1092      	asrs	r2, r2, #2
 8000edc:	17db      	asrs	r3, r3, #31
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	4b8e      	ldr	r3, [pc, #568]	; (800111c <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 8000ee4:	801a      	strh	r2, [r3, #0]
		currentl = ((256) * currentmsbl + currentlsbl) / 10.0;
 8000ee6:	4b8a      	ldr	r3, [pc, #552]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	4a87      	ldr	r2, [pc, #540]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8000eee:	7812      	ldrb	r2, [r2, #0]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff faba 	bl	800046c <__aeabi_i2d>
 8000ef8:	f04f 0200 	mov.w	r2, #0
 8000efc:	4b88      	ldr	r3, [pc, #544]	; (8001120 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000efe:	f7ff fc49 	bl	8000794 <__aeabi_ddiv>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4610      	mov	r0, r2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f7ff fd2b 	bl	8000964 <__aeabi_d2f>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a84      	ldr	r2, [pc, #528]	; (8001124 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000f12:	6013      	str	r3, [r2, #0]
		outputHubL = pidController(&pidHubL, (speedCommand - speedl),
 8000f14:	4b84      	ldr	r3, [pc, #528]	; (8001128 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a7e      	ldr	r2, [pc, #504]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000f1a:	8812      	ldrh	r2, [r2, #0]
 8000f1c:	1a99      	subs	r1, r3, r2
 8000f1e:	4b7d      	ldr	r3, [pc, #500]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	2205      	movs	r2, #5
 8000f24:	4881      	ldr	r0, [pc, #516]	; (800112c <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 8000f26:	f7ff feef 	bl	8000d08 <pidController>
 8000f2a:	eef0 7a40 	vmov.f32	s15, s0
 8000f2e:	4b80      	ldr	r3, [pc, #512]	; (8001130 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 8000f30:	edc3 7a00 	vstr	s15, [r3]
		ERROR_THRESH, speedl);
		if (vehicleDir == 0) {
 8000f34:	4b7f      	ldr	r3, [pc, #508]	; (8001134 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10c      	bne.n	8000f56 <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f42:	487d      	ldr	r0, [pc, #500]	; (8001138 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 8000f44:	f002 f960 	bl	8003208 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f4e:	487a      	ldr	r0, [pc, #488]	; (8001138 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 8000f50:	f002 f95a 	bl	8003208 <HAL_GPIO_WritePin>
 8000f54:	e00f      	b.n	8000f76 <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
		} else if (vehicleDir == 1) {
 8000f56:	4b77      	ldr	r3, [pc, #476]	; (8001134 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d10b      	bne.n	8000f76 <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f64:	4874      	ldr	r0, [pc, #464]	; (8001138 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 8000f66:	f002 f94f 	bl	8003208 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f70:	4871      	ldr	r0, [pc, #452]	; (8001138 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 8000f72:	f002 f949 	bl	8003208 <HAL_GPIO_WritePin>
		}
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, outputHubL);
 8000f76:	4b6e      	ldr	r3, [pc, #440]	; (8001130 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 8000f78:	edd3 7a00 	vldr	s15, [r3]
 8000f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f80:	ee17 3a90 	vmov	r3, s15
 8000f84:	2200      	movs	r2, #0
 8000f86:	2110      	movs	r1, #16
 8000f88:	486c      	ldr	r0, [pc, #432]	; (800113c <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 8000f8a:	f001 fe9b 	bl	8002cc4 <HAL_DAC_SetValue>
 8000f8e:	e08c      	b.n	80010aa <HAL_CAN_RxFifo0MsgPendingCallback+0x24a>
	} else if (Rxheader.ExtId == 0x0CF11E05) {
 8000f90:	4b57      	ldr	r3, [pc, #348]	; (80010f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	4a6a      	ldr	r2, [pc, #424]	; (8001140 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	f040 8087 	bne.w	80010aa <HAL_CAN_RxFifo0MsgPendingCallback+0x24a>
		speedlsbr = Rxmsg[0];
 8000f9c:	4b53      	ldr	r3, [pc, #332]	; (80010ec <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8000f9e:	781a      	ldrb	r2, [r3, #0]
 8000fa0:	4b68      	ldr	r3, [pc, #416]	; (8001144 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 8000fa2:	701a      	strb	r2, [r3, #0]
		speedmsbr = Rxmsg[1];
 8000fa4:	4b51      	ldr	r3, [pc, #324]	; (80010ec <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8000fa6:	785a      	ldrb	r2, [r3, #1]
 8000fa8:	4b67      	ldr	r3, [pc, #412]	; (8001148 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 8000faa:	701a      	strb	r2, [r3, #0]
		currentlsbr = Rxmsg[2];
 8000fac:	4b4f      	ldr	r3, [pc, #316]	; (80010ec <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8000fae:	789a      	ldrb	r2, [r3, #2]
 8000fb0:	4b66      	ldr	r3, [pc, #408]	; (800114c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>)
 8000fb2:	701a      	strb	r2, [r3, #0]
		currentmsbr = Rxmsg[3];
 8000fb4:	4b4d      	ldr	r3, [pc, #308]	; (80010ec <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8000fb6:	78da      	ldrb	r2, [r3, #3]
 8000fb8:	4b65      	ldr	r3, [pc, #404]	; (8001150 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 8000fba:	701a      	strb	r2, [r3, #0]
		voltagelsbr = Rxmsg[4];
 8000fbc:	4b4b      	ldr	r3, [pc, #300]	; (80010ec <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8000fbe:	791a      	ldrb	r2, [r3, #4]
 8000fc0:	4b64      	ldr	r3, [pc, #400]	; (8001154 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 8000fc2:	701a      	strb	r2, [r3, #0]
		voltagemsbr = Rxmsg[5];
 8000fc4:	4b49      	ldr	r3, [pc, #292]	; (80010ec <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8000fc6:	795a      	ldrb	r2, [r3, #5]
 8000fc8:	4b63      	ldr	r3, [pc, #396]	; (8001158 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f8>)
 8000fca:	701a      	strb	r2, [r3, #0]
		voltager = ((256) * voltagemsbr + voltagelsbr) / 10;
 8000fcc:	4b62      	ldr	r3, [pc, #392]	; (8001158 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f8>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	4a60      	ldr	r2, [pc, #384]	; (8001154 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 8000fd4:	7812      	ldrb	r2, [r2, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a4f      	ldr	r2, [pc, #316]	; (8001118 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8000fda:	fb82 1203 	smull	r1, r2, r2, r3
 8000fde:	1092      	asrs	r2, r2, #2
 8000fe0:	17db      	asrs	r3, r3, #31
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	4b5d      	ldr	r3, [pc, #372]	; (800115c <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8000fe8:	801a      	strh	r2, [r3, #0]
		currentr = (((256) * currentmsbr + currentlsbr) / 10.0);
 8000fea:	4b59      	ldr	r3, [pc, #356]	; (8001150 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	4a56      	ldr	r2, [pc, #344]	; (800114c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>)
 8000ff2:	7812      	ldrb	r2, [r2, #0]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fa38 	bl	800046c <__aeabi_i2d>
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	4b47      	ldr	r3, [pc, #284]	; (8001120 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001002:	f7ff fbc7 	bl	8000794 <__aeabi_ddiv>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4610      	mov	r0, r2
 800100c:	4619      	mov	r1, r3
 800100e:	f7ff fca9 	bl	8000964 <__aeabi_d2f>
 8001012:	4603      	mov	r3, r0
 8001014:	4a52      	ldr	r2, [pc, #328]	; (8001160 <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8001016:	6013      	str	r3, [r2, #0]
		speedr = (256) * speedmsbr + (speedlsbr);
 8001018:	4b4b      	ldr	r3, [pc, #300]	; (8001148 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b29b      	uxth	r3, r3
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b29a      	uxth	r2, r3
 8001022:	4b48      	ldr	r3, [pc, #288]	; (8001144 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b29b      	uxth	r3, r3
 8001028:	4413      	add	r3, r2
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <HAL_CAN_RxFifo0MsgPendingCallback+0x304>)
 800102e:	801a      	strh	r2, [r3, #0]
		outputHubR = pidController(&pidHubR, (speedCommand - speedr),
 8001030:	4b3d      	ldr	r3, [pc, #244]	; (8001128 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a4b      	ldr	r2, [pc, #300]	; (8001164 <HAL_CAN_RxFifo0MsgPendingCallback+0x304>)
 8001036:	8812      	ldrh	r2, [r2, #0]
 8001038:	1a99      	subs	r1, r3, r2
 800103a:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <HAL_CAN_RxFifo0MsgPendingCallback+0x304>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	2205      	movs	r2, #5
 8001040:	4849      	ldr	r0, [pc, #292]	; (8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0x308>)
 8001042:	f7ff fe61 	bl	8000d08 <pidController>
 8001046:	eef0 7a40 	vmov.f32	s15, s0
 800104a:	4b48      	ldr	r3, [pc, #288]	; (800116c <HAL_CAN_RxFifo0MsgPendingCallback+0x30c>)
 800104c:	edc3 7a00 	vstr	s15, [r3]
		ERROR_THRESH, speedr);
		if (vehicleDir == 0) {
 8001050:	4b38      	ldr	r3, [pc, #224]	; (8001134 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d10c      	bne.n	8001072 <HAL_CAN_RxFifo0MsgPendingCallback+0x212>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800105e:	4836      	ldr	r0, [pc, #216]	; (8001138 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 8001060:	f002 f8d2 	bl	8003208 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800106a:	4833      	ldr	r0, [pc, #204]	; (8001138 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800106c:	f002 f8cc 	bl	8003208 <HAL_GPIO_WritePin>
 8001070:	e00f      	b.n	8001092 <HAL_CAN_RxFifo0MsgPendingCallback+0x232>
		} else if (vehicleDir == 1) {
 8001072:	4b30      	ldr	r3, [pc, #192]	; (8001134 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d10b      	bne.n	8001092 <HAL_CAN_RxFifo0MsgPendingCallback+0x232>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001080:	482d      	ldr	r0, [pc, #180]	; (8001138 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 8001082:	f002 f8c1 	bl	8003208 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800108c:	482a      	ldr	r0, [pc, #168]	; (8001138 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800108e:	f002 f8bb 	bl	8003208 <HAL_GPIO_WritePin>
		}
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, outputHubR);
 8001092:	4b36      	ldr	r3, [pc, #216]	; (800116c <HAL_CAN_RxFifo0MsgPendingCallback+0x30c>)
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800109c:	ee17 3a90 	vmov	r3, s15
 80010a0:	2200      	movs	r2, #0
 80010a2:	2100      	movs	r1, #0
 80010a4:	4825      	ldr	r0, [pc, #148]	; (800113c <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 80010a6:	f001 fe0d 	bl	8002cc4 <HAL_DAC_SetValue>
	}

	switch (Rxheader.StdId) {
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b69      	cmp	r3, #105	; 0x69
 80010b0:	d078      	beq.n	80011a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>
 80010b2:	2b69      	cmp	r3, #105	; 0x69
 80010b4:	f200 808e 	bhi.w	80011d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x374>
 80010b8:	2b36      	cmp	r3, #54	; 0x36
 80010ba:	d059      	beq.n	8001170 <HAL_CAN_RxFifo0MsgPendingCallback+0x310>
 80010bc:	2b41      	cmp	r3, #65	; 0x41
 80010be:	f040 8089 	bne.w	80011d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x374>
	case 0x41:
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80010c2:	2300      	movs	r3, #0
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	481c      	ldr	r0, [pc, #112]	; (800113c <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 80010ca:	f001 fdfb 	bl	8002cc4 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 80010ce:	2300      	movs	r3, #0
 80010d0:	2200      	movs	r2, #0
 80010d2:	2110      	movs	r1, #16
 80010d4:	4819      	ldr	r0, [pc, #100]	; (800113c <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 80010d6:	f001 fdf5 	bl	8002cc4 <HAL_DAC_SetValue>
		HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
 80010da:	2100      	movs	r1, #0
 80010dc:	4817      	ldr	r0, [pc, #92]	; (800113c <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 80010de:	f001 fdd4 	bl	8002c8a <HAL_DAC_Stop>
		HAL_DAC_Stop(&hdac, DAC_CHANNEL_2);
 80010e2:	2110      	movs	r1, #16
 80010e4:	4815      	ldr	r0, [pc, #84]	; (800113c <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 80010e6:	f001 fdd0 	bl	8002c8a <HAL_DAC_Stop>
		break;
 80010ea:	e073      	b.n	80011d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x374>
 80010ec:	20000200 	.word	0x20000200
 80010f0:	200001e4 	.word	0x200001e4
 80010f4:	2000008c 	.word	0x2000008c
 80010f8:	0cf11e06 	.word	0x0cf11e06
 80010fc:	2000020c 	.word	0x2000020c
 8001100:	2000020d 	.word	0x2000020d
 8001104:	20000214 	.word	0x20000214
 8001108:	20000212 	.word	0x20000212
 800110c:	20000216 	.word	0x20000216
 8001110:	20000218 	.word	0x20000218
 8001114:	2000020e 	.word	0x2000020e
 8001118:	66666667 	.word	0x66666667
 800111c:	20000228 	.word	0x20000228
 8001120:	40240000 	.word	0x40240000
 8001124:	20000224 	.word	0x20000224
 8001128:	20000230 	.word	0x20000230
 800112c:	20000024 	.word	0x20000024
 8001130:	2000023c 	.word	0x2000023c
 8001134:	20000234 	.word	0x20000234
 8001138:	40020c00 	.word	0x40020c00
 800113c:	200000b4 	.word	0x200000b4
 8001140:	0cf11e05 	.word	0x0cf11e05
 8001144:	20000210 	.word	0x20000210
 8001148:	20000211 	.word	0x20000211
 800114c:	20000217 	.word	0x20000217
 8001150:	20000219 	.word	0x20000219
 8001154:	20000215 	.word	0x20000215
 8001158:	20000213 	.word	0x20000213
 800115c:	20000220 	.word	0x20000220
 8001160:	2000021c 	.word	0x2000021c
 8001164:	2000021a 	.word	0x2000021a
 8001168:	20000044 	.word	0x20000044
 800116c:	20000240 	.word	0x20000240
	case 0x36:
		steeringFeedback = Rxmsg[0] | (Rxmsg[1] << 8);
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x388>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x388>)
 8001178:	785b      	ldrb	r3, [r3, #1]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	4313      	orrs	r3, r2
 800117e:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <HAL_CAN_RxFifo0MsgPendingCallback+0x38c>)
 8001180:	6013      	str	r3, [r2, #0]
		outputSteering = pidController(&pidPot,
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x390>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_CAN_RxFifo0MsgPendingCallback+0x38c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	1ad1      	subs	r1, r2, r3
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_CAN_RxFifo0MsgPendingCallback+0x38c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2205      	movs	r2, #5
 8001192:	4818      	ldr	r0, [pc, #96]	; (80011f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x394>)
 8001194:	f7ff fdb8 	bl	8000d08 <pidController>
 8001198:	eef0 7a40 	vmov.f32	s15, s0
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x398>)
 800119e:	edc3 7a00 	vstr	s15, [r3]
				(steeringCommand - steeringFeedback), ERROR_THRESH,
				steeringFeedback);
		break;
 80011a2:	e017      	b.n	80011d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x374>
	case 0x69:
		steeringCommand = Rxmsg[0] | (Rxmsg[1] << 8);
 80011a4:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x388>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x388>)
 80011ac:	785b      	ldrb	r3, [r3, #1]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	4313      	orrs	r3, r2
 80011b2:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x390>)
 80011b4:	6013      	str	r3, [r2, #0]
		speedCommand = Rxmsg[2] | (Rxmsg[3] << 8);
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x388>)
 80011b8:	789b      	ldrb	r3, [r3, #2]
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x388>)
 80011be:	78db      	ldrb	r3, [r3, #3]
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	4313      	orrs	r3, r2
 80011c4:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <HAL_CAN_RxFifo0MsgPendingCallback+0x39c>)
 80011c6:	6013      	str	r3, [r2, #0]
		vehicleDir = Rxmsg[4]; //0->fwd ; 1-> bkwd
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x388>)
 80011ca:	791b      	ldrb	r3, [r3, #4]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a0>)
 80011d0:	601a      	str	r2, [r3, #0]
		break;
 80011d2:	bf00      	nop
	}
	Rxheader.StdId = 0;
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
	Rxheader.ExtId = 0;
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000200 	.word	0x20000200
 80011ec:	2000022c 	.word	0x2000022c
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000004 	.word	0x20000004
 80011f8:	20000238 	.word	0x20000238
 80011fc:	20000230 	.word	0x20000230
 8001200:	20000234 	.word	0x20000234
 8001204:	200001e4 	.word	0x200001e4

08001208 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	;
	HAL_Init();
 800120c:	f000 fdbe 	bl	8001d8c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001210:	f000 f87c 	bl	800130c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001214:	f000 fad2 	bl	80017bc <MX_GPIO_Init>
	MX_DAC_Init();
 8001218:	f000 f934 	bl	8001484 <MX_DAC_Init>
	MX_TIM2_Init();
 800121c:	f000 f9f4 	bl	8001608 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 8001220:	f000 faa2 	bl	8001768 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001224:	f000 f962 	bl	80014ec <MX_TIM1_Init>
	MX_CAN1_Init();
 8001228:	f000 f8da 	bl	80013e0 <MX_CAN1_Init>
	MX_TIM3_Init();
 800122c:	f000 fa4e 	bl	80016cc <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001230:	2100      	movs	r1, #0
 8001232:	482f      	ldr	r0, [pc, #188]	; (80012f0 <main+0xe8>)
 8001234:	f001 fcd7 	bl	8002be6 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001238:	2110      	movs	r1, #16
 800123a:	482d      	ldr	r0, [pc, #180]	; (80012f0 <main+0xe8>)
 800123c:	f001 fcd3 	bl	8002be6 <HAL_DAC_Start>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, SET);
 8001240:	2201      	movs	r2, #1
 8001242:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001246:	482b      	ldr	r0, [pc, #172]	; (80012f4 <main+0xec>)
 8001248:	f001 ffde 	bl	8003208 <HAL_GPIO_WritePin>
	HAL_CAN_Start(&hcan1);
 800124c:	482a      	ldr	r0, [pc, #168]	; (80012f8 <main+0xf0>)
 800124e:	f000 ffeb 	bl	8002228 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001252:	2102      	movs	r1, #2
 8001254:	4828      	ldr	r0, [pc, #160]	; (80012f8 <main+0xf0>)
 8001256:	f001 f93d 	bl	80024d4 <HAL_CAN_ActivateNotification>
	/* USER CODE END 2 */

	// Burn the brake....Skrtttt
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001260:	4824      	ldr	r0, [pc, #144]	; (80012f4 <main+0xec>)
 8001262:	f001 ffd1 	bl	8003208 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		angle = outputSteering / 17; // 1024 * 60;
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <main+0xf4>)
 8001268:	ed93 7a00 	vldr	s14, [r3]
 800126c:	eef3 6a01 	vmov.f32	s13, #49	; 0x41880000  17.0
 8001270:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001278:	ee17 2a90 	vmov	r2, s15
 800127c:	4b20      	ldr	r3, [pc, #128]	; (8001300 <main+0xf8>)
 800127e:	601a      	str	r2, [r3, #0]
		//	  	HAL_UART_Receive_IT(&huart2, data, 8);
		if (angle > STEER_DEADZONE) {
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <main+0xf8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b14      	cmp	r3, #20
 8001286:	dd05      	ble.n	8001294 <main+0x8c>
			Steer_right(angle);
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <main+0xf8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fdd1 	bl	8000e34 <Steer_right>
 8001292:	e01b      	b.n	80012cc <main+0xc4>
		} else if (angle < -STEER_DEADZONE) {
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <main+0xf8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f113 0f14 	cmn.w	r3, #20
 800129c:	da06      	bge.n	80012ac <main+0xa4>
			Steer_left(-angle);
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <main+0xf8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	425b      	negs	r3, r3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fdaf 	bl	8000e08 <Steer_left>
 80012aa:	e00f      	b.n	80012cc <main+0xc4>
		} else {
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80012ac:	2100      	movs	r1, #0
 80012ae:	4815      	ldr	r0, [pc, #84]	; (8001304 <main+0xfc>)
 80012b0:	f002 fdc2 	bl	8003e38 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80012b4:	2104      	movs	r1, #4
 80012b6:	4813      	ldr	r0, [pc, #76]	; (8001304 <main+0xfc>)
 80012b8:	f002 fdbe 	bl	8003e38 <HAL_TIM_PWM_Stop>
			htim2.Instance->CCR1 = 0;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <main+0xfc>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2200      	movs	r2, #0
 80012c2:	635a      	str	r2, [r3, #52]	; 0x34
			htim2.Instance->CCR2 = 0;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <main+0xfc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2200      	movs	r2, #0
 80012ca:	639a      	str	r2, [r3, #56]	; 0x38
		}

		if(speedCommand==0)
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <main+0x100>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d106      	bne.n	80012e2 <main+0xda>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012da:	4806      	ldr	r0, [pc, #24]	; (80012f4 <main+0xec>)
 80012dc:	f001 ff94 	bl	8003208 <HAL_GPIO_WritePin>
 80012e0:	e7c1      	b.n	8001266 <main+0x5e>
		else
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <main+0xec>)
 80012ea:	f001 ff8d 	bl	8003208 <HAL_GPIO_WritePin>
		angle = outputSteering / 17; // 1024 * 60;
 80012ee:	e7ba      	b.n	8001266 <main+0x5e>
 80012f0:	200000b4 	.word	0x200000b4
 80012f4:	40020c00 	.word	0x40020c00
 80012f8:	2000008c 	.word	0x2000008c
 80012fc:	20000238 	.word	0x20000238
 8001300:	20000208 	.word	0x20000208
 8001304:	20000110 	.word	0x20000110
 8001308:	20000230 	.word	0x20000230

0800130c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b094      	sub	sp, #80	; 0x50
 8001310:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001312:	f107 0320 	add.w	r3, r7, #32
 8001316:	2230      	movs	r2, #48	; 0x30
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f004 fbea 	bl	8005af4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <SystemClock_Config+0xcc>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	4a27      	ldr	r2, [pc, #156]	; (80013d8 <SystemClock_Config+0xcc>)
 800133a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133e:	6413      	str	r3, [r2, #64]	; 0x40
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <SystemClock_Config+0xcc>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <SystemClock_Config+0xd0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a21      	ldr	r2, [pc, #132]	; (80013dc <SystemClock_Config+0xd0>)
 8001356:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <SystemClock_Config+0xd0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001368:	2302      	movs	r3, #2
 800136a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800136c:	2301      	movs	r3, #1
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001370:	2310      	movs	r3, #16
 8001372:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001374:	2302      	movs	r3, #2
 8001376:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001378:	2300      	movs	r3, #0
 800137a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800137c:	2308      	movs	r3, #8
 800137e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8001380:	2348      	movs	r3, #72	; 0x48
 8001382:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001384:	2302      	movs	r3, #2
 8001386:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001388:	2307      	movs	r3, #7
 800138a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800138c:	f107 0320 	add.w	r3, r7, #32
 8001390:	4618      	mov	r0, r3
 8001392:	f001 ff53 	bl	800323c <HAL_RCC_OscConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0x94>
		Error_Handler();
 800139c:	f000 fa60 	bl	8001860 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013a0:	230f      	movs	r3, #15
 80013a2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a4:	2302      	movs	r3, #2
 80013a6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	2102      	movs	r1, #2
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 f9b4 	bl	800372c <HAL_RCC_ClockConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0xc2>
		Error_Handler();
 80013ca:	f000 fa49 	bl	8001860 <Error_Handler>
	}
}
 80013ce:	bf00      	nop
 80013d0:	3750      	adds	r7, #80	; 0x50
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000

080013e0 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 80013e6:	4b25      	ldr	r3, [pc, #148]	; (800147c <MX_CAN1_Init+0x9c>)
 80013e8:	4a25      	ldr	r2, [pc, #148]	; (8001480 <MX_CAN1_Init+0xa0>)
 80013ea:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 36;
 80013ec:	4b23      	ldr	r3, [pc, #140]	; (800147c <MX_CAN1_Init+0x9c>)
 80013ee:	2224      	movs	r2, #36	; 0x24
 80013f0:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013f2:	4b22      	ldr	r3, [pc, #136]	; (800147c <MX_CAN1_Init+0x9c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013f8:	4b20      	ldr	r3, [pc, #128]	; (800147c <MX_CAN1_Init+0x9c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80013fe:	4b1f      	ldr	r3, [pc, #124]	; (800147c <MX_CAN1_Init+0x9c>)
 8001400:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001404:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <MX_CAN1_Init+0x9c>)
 8001408:	2200      	movs	r2, #0
 800140a:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <MX_CAN1_Init+0x9c>)
 800140e:	2200      	movs	r2, #0
 8001410:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <MX_CAN1_Init+0x9c>)
 8001414:	2200      	movs	r2, #0
 8001416:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <MX_CAN1_Init+0x9c>)
 800141a:	2200      	movs	r2, #0
 800141c:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <MX_CAN1_Init+0x9c>)
 8001420:	2200      	movs	r2, #0
 8001422:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <MX_CAN1_Init+0x9c>)
 8001426:	2200      	movs	r2, #0
 8001428:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_CAN1_Init+0x9c>)
 800142c:	2200      	movs	r2, #0
 800142e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8001430:	4812      	ldr	r0, [pc, #72]	; (800147c <MX_CAN1_Init+0x9c>)
 8001432:	f000 fd1d 	bl	8001e70 <HAL_CAN_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_CAN1_Init+0x60>
		Error_Handler();
 800143c:	f000 fa10 	bl	8001860 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef sFilter;
	sFilter.FilterBank = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
	sFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
	sFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001448:	2301      	movs	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
	sFilter.FilterIdHigh = 0x0000; //((ID >> 13) & 0x001F);
 800144c:	2300      	movs	r3, #0
 800144e:	603b      	str	r3, [r7, #0]
	sFilter.FilterIdLow = 0x0000; //((ID << 3) & 0xFFF8);
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
	sFilter.FilterMaskIdHigh = 0x0000;
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
	sFilter.FilterMaskIdLow = 0x0000;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
	sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
	sFilter.FilterActivation = ENABLE;
 8001460:	2301      	movs	r3, #1
 8001462:	623b      	str	r3, [r7, #32]
	sFilter.SlaveStartFilterBank = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 8001468:	463b      	mov	r3, r7
 800146a:	4619      	mov	r1, r3
 800146c:	4803      	ldr	r0, [pc, #12]	; (800147c <MX_CAN1_Init+0x9c>)
 800146e:	f000 fdfb 	bl	8002068 <HAL_CAN_ConfigFilter>
	/* USER CODE END CAN1_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	; 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000008c 	.word	0x2000008c
 8001480:	40006400 	.word	0x40006400

08001484 <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 800148a:	463b      	mov	r3, r7
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]

	/* USER CODE END DAC_Init 1 */

	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_DAC_Init+0x60>)
 8001494:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <MX_DAC_Init+0x64>)
 8001496:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8001498:	4812      	ldr	r0, [pc, #72]	; (80014e4 <MX_DAC_Init+0x60>)
 800149a:	f001 fb82 	bl	8002ba2 <HAL_DAC_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_DAC_Init+0x24>
		Error_Handler();
 80014a4:	f000 f9dc 	bl	8001860 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80014b0:	463b      	mov	r3, r7
 80014b2:	2200      	movs	r2, #0
 80014b4:	4619      	mov	r1, r3
 80014b6:	480b      	ldr	r0, [pc, #44]	; (80014e4 <MX_DAC_Init+0x60>)
 80014b8:	f001 fc29 	bl	8002d0e <HAL_DAC_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_DAC_Init+0x42>
		Error_Handler();
 80014c2:	f000 f9cd 	bl	8001860 <Error_Handler>
	}

	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 80014c6:	463b      	mov	r3, r7
 80014c8:	2210      	movs	r2, #16
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_DAC_Init+0x60>)
 80014ce:	f001 fc1e 	bl	8002d0e <HAL_DAC_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_DAC_Init+0x58>
		Error_Handler();
 80014d8:	f000 f9c2 	bl	8001860 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200000b4 	.word	0x200000b4
 80014e8:	40007400 	.word	0x40007400

080014ec <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b092      	sub	sp, #72	; 0x48
 80014f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	615a      	str	r2, [r3, #20]
 800150e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2220      	movs	r2, #32
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f004 faec 	bl	8005af4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800151c:	4b38      	ldr	r3, [pc, #224]	; (8001600 <MX_TIM1_Init+0x114>)
 800151e:	4a39      	ldr	r2, [pc, #228]	; (8001604 <MX_TIM1_Init+0x118>)
 8001520:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 8001522:	4b37      	ldr	r3, [pc, #220]	; (8001600 <MX_TIM1_Init+0x114>)
 8001524:	2247      	movs	r2, #71	; 0x47
 8001526:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b35      	ldr	r3, [pc, #212]	; (8001600 <MX_TIM1_Init+0x114>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100 - 1;
 800152e:	4b34      	ldr	r3, [pc, #208]	; (8001600 <MX_TIM1_Init+0x114>)
 8001530:	2263      	movs	r2, #99	; 0x63
 8001532:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001534:	4b32      	ldr	r3, [pc, #200]	; (8001600 <MX_TIM1_Init+0x114>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800153a:	4b31      	ldr	r3, [pc, #196]	; (8001600 <MX_TIM1_Init+0x114>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001540:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <MX_TIM1_Init+0x114>)
 8001542:	2280      	movs	r2, #128	; 0x80
 8001544:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001546:	482e      	ldr	r0, [pc, #184]	; (8001600 <MX_TIM1_Init+0x114>)
 8001548:	f002 fb5f 	bl	8003c0a <HAL_TIM_PWM_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM1_Init+0x6a>
		Error_Handler();
 8001552:	f000 f985 	bl	8001860 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800155e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001562:	4619      	mov	r1, r3
 8001564:	4826      	ldr	r0, [pc, #152]	; (8001600 <MX_TIM1_Init+0x114>)
 8001566:	f003 faab 	bl	8004ac0 <HAL_TIMEx_MasterConfigSynchronization>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM1_Init+0x88>
			!= HAL_OK) {
		Error_Handler();
 8001570:	f000 f976 	bl	8001860 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001574:	2360      	movs	r3, #96	; 0x60
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001580:	2300      	movs	r3, #0
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001594:	2200      	movs	r2, #0
 8001596:	4619      	mov	r1, r3
 8001598:	4819      	ldr	r0, [pc, #100]	; (8001600 <MX_TIM1_Init+0x114>)
 800159a:	f002 fdc5 	bl	8004128 <HAL_TIM_PWM_ConfigChannel>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM1_Init+0xbc>
			!= HAL_OK) {
		Error_Handler();
 80015a4:	f000 f95c 	bl	8001860 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80015a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ac:	2204      	movs	r2, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4813      	ldr	r0, [pc, #76]	; (8001600 <MX_TIM1_Init+0x114>)
 80015b2:	f002 fdb9 	bl	8004128 <HAL_TIM_PWM_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM1_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 80015bc:	f000 f950 	bl	8001860 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4807      	ldr	r0, [pc, #28]	; (8001600 <MX_TIM1_Init+0x114>)
 80015e4:	f003 fae8 	bl	8004bb8 <HAL_TIMEx_ConfigBreakDeadTime>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM1_Init+0x106>
			!= HAL_OK) {
		Error_Handler();
 80015ee:	f000 f937 	bl	8001860 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80015f2:	4803      	ldr	r0, [pc, #12]	; (8001600 <MX_TIM1_Init+0x114>)
 80015f4:	f000 fa74 	bl	8001ae0 <HAL_TIM_MspPostInit>

}
 80015f8:	bf00      	nop
 80015fa:	3748      	adds	r7, #72	; 0x48
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200000c8 	.word	0x200000c8
 8001604:	40010000 	.word	0x40010000

08001608 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800160e:	f107 0320 	add.w	r3, r7, #32
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	615a      	str	r2, [r3, #20]
 8001628:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800162a:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <MX_TIM2_Init+0xc0>)
 800162c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001630:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <MX_TIM2_Init+0xc0>)
 8001634:	2247      	movs	r2, #71	; 0x47
 8001636:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <MX_TIM2_Init+0xc0>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100 - 1;
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <MX_TIM2_Init+0xc0>)
 8001640:	2263      	movs	r2, #99	; 0x63
 8001642:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001644:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <MX_TIM2_Init+0xc0>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <MX_TIM2_Init+0xc0>)
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001650:	481d      	ldr	r0, [pc, #116]	; (80016c8 <MX_TIM2_Init+0xc0>)
 8001652:	f002 fada 	bl	8003c0a <HAL_TIM_PWM_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM2_Init+0x58>
		Error_Handler();
 800165c:	f000 f900 	bl	8001860 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001668:	f107 0320 	add.w	r3, r7, #32
 800166c:	4619      	mov	r1, r3
 800166e:	4816      	ldr	r0, [pc, #88]	; (80016c8 <MX_TIM2_Init+0xc0>)
 8001670:	f003 fa26 	bl	8004ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM2_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 800167a:	f000 f8f1 	bl	8001860 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800167e:	2360      	movs	r3, #96	; 0x60
 8001680:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2200      	movs	r2, #0
 8001692:	4619      	mov	r1, r3
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <MX_TIM2_Init+0xc0>)
 8001696:	f002 fd47 	bl	8004128 <HAL_TIM_PWM_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM2_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 80016a0:	f000 f8de 	bl	8001860 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2204      	movs	r2, #4
 80016a8:	4619      	mov	r1, r3
 80016aa:	4807      	ldr	r0, [pc, #28]	; (80016c8 <MX_TIM2_Init+0xc0>)
 80016ac:	f002 fd3c 	bl	8004128 <HAL_TIM_PWM_ConfigChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80016b6:	f000 f8d3 	bl	8001860 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80016ba:	4803      	ldr	r0, [pc, #12]	; (80016c8 <MX_TIM2_Init+0xc0>)
 80016bc:	f000 fa10 	bl	8001ae0 <HAL_TIM_MspPostInit>

}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000110 	.word	0x20000110

080016cc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80016e0:	463b      	mov	r3, r7
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <MX_TIM3_Init+0x94>)
 80016ea:	4a1e      	ldr	r2, [pc, #120]	; (8001764 <MX_TIM3_Init+0x98>)
 80016ec:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 10000 - 1;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <MX_TIM3_Init+0x94>)
 80016f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80016f4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <MX_TIM3_Init+0x94>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 7200 - 1;
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <MX_TIM3_Init+0x94>)
 80016fe:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001702:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <MX_TIM3_Init+0x94>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <MX_TIM3_Init+0x94>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001710:	4813      	ldr	r0, [pc, #76]	; (8001760 <MX_TIM3_Init+0x94>)
 8001712:	f002 fa2b 	bl	8003b6c <HAL_TIM_Base_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM3_Init+0x54>
		Error_Handler();
 800171c:	f000 f8a0 	bl	8001860 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001724:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	4619      	mov	r1, r3
 800172c:	480c      	ldr	r0, [pc, #48]	; (8001760 <MX_TIM3_Init+0x94>)
 800172e:	f002 fdbd 	bl	80042ac <HAL_TIM_ConfigClockSource>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM3_Init+0x70>
		Error_Handler();
 8001738:	f000 f892 	bl	8001860 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001744:	463b      	mov	r3, r7
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_TIM3_Init+0x94>)
 800174a:	f003 f9b9 	bl	8004ac0 <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001754:	f000 f884 	bl	8001860 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000158 	.word	0x20000158
 8001764:	40000400 	.word	0x40000400

08001768 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <MX_USART2_UART_Init+0x50>)
 8001770:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 80017a0:	f003 fa70 	bl	8004c84 <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80017aa:	f000 f859 	bl	8001860 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200001a0 	.word	0x200001a0
 80017b8:	40004400 	.word	0x40004400

080017bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <MX_GPIO_Init+0x9c>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a1f      	ldr	r2, [pc, #124]	; (8001858 <MX_GPIO_Init+0x9c>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <MX_GPIO_Init+0x9c>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <MX_GPIO_Init+0x9c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a18      	ldr	r2, [pc, #96]	; (8001858 <MX_GPIO_Init+0x9c>)
 80017f8:	f043 0310 	orr.w	r3, r3, #16
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <MX_GPIO_Init+0x9c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <MX_GPIO_Init+0x9c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a11      	ldr	r2, [pc, #68]	; (8001858 <MX_GPIO_Init+0x9c>)
 8001814:	f043 0308 	orr.w	r3, r3, #8
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_GPIO_Init+0x9c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001826:	2200      	movs	r2, #0
 8001828:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 800182c:	480b      	ldr	r0, [pc, #44]	; (800185c <MX_GPIO_Init+0xa0>)
 800182e:	f001 fceb 	bl	8003208 <HAL_GPIO_WritePin>
	GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);

	/*Configure GPIO pins : PD11 PD12 PD13 PD14 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8001832:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001836:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	4619      	mov	r1, r3
 800184a:	4804      	ldr	r0, [pc, #16]	; (800185c <MX_GPIO_Init+0xa0>)
 800184c:	f001 fb40 	bl	8002ed0 <HAL_GPIO_Init>

}
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40023800 	.word	0x40023800
 800185c:	40020c00 	.word	0x40020c00

08001860 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001868:	e7fe      	b.n	8001868 <Error_Handler+0x8>
	...

0800186c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <HAL_MspInit+0x4c>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <HAL_MspInit+0x4c>)
 800187c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001880:	6453      	str	r3, [r2, #68]	; 0x44
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_MspInit+0x4c>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_MspInit+0x4c>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <HAL_MspInit+0x4c>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_MspInit+0x4c>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018aa:	2007      	movs	r0, #7
 80018ac:	f001 f938 	bl	8002b20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800

080018bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a2c      	ldr	r2, [pc, #176]	; (800198c <HAL_CAN_MspInit+0xd0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d152      	bne.n	8001984 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <HAL_CAN_MspInit+0xd4>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a2a      	ldr	r2, [pc, #168]	; (8001990 <HAL_CAN_MspInit+0xd4>)
 80018e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b28      	ldr	r3, [pc, #160]	; (8001990 <HAL_CAN_MspInit+0xd4>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b24      	ldr	r3, [pc, #144]	; (8001990 <HAL_CAN_MspInit+0xd4>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a23      	ldr	r2, [pc, #140]	; (8001990 <HAL_CAN_MspInit+0xd4>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b21      	ldr	r3, [pc, #132]	; (8001990 <HAL_CAN_MspInit+0xd4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <HAL_CAN_MspInit+0xd4>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a1c      	ldr	r2, [pc, #112]	; (8001990 <HAL_CAN_MspInit+0xd4>)
 8001920:	f043 0308 	orr.w	r3, r3, #8
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_CAN_MspInit+0xd4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PD0     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001944:	2309      	movs	r3, #9
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4811      	ldr	r0, [pc, #68]	; (8001994 <HAL_CAN_MspInit+0xd8>)
 8001950:	f001 fabe 	bl	8002ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001954:	2301      	movs	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001964:	2309      	movs	r3, #9
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4619      	mov	r1, r3
 800196e:	480a      	ldr	r0, [pc, #40]	; (8001998 <HAL_CAN_MspInit+0xdc>)
 8001970:	f001 faae 	bl	8002ed0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001974:	2200      	movs	r2, #0
 8001976:	2100      	movs	r1, #0
 8001978:	2014      	movs	r0, #20
 800197a:	f001 f8dc 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800197e:	2014      	movs	r0, #20
 8001980:	f001 f8f5 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001984:	bf00      	nop
 8001986:	3728      	adds	r7, #40	; 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40006400 	.word	0x40006400
 8001990:	40023800 	.word	0x40023800
 8001994:	40020000 	.word	0x40020000
 8001998:	40020c00 	.word	0x40020c00

0800199c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a17      	ldr	r2, [pc, #92]	; (8001a18 <HAL_DAC_MspInit+0x7c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d127      	bne.n	8001a0e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <HAL_DAC_MspInit+0x80>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <HAL_DAC_MspInit+0x80>)
 80019c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <HAL_DAC_MspInit+0x80>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_DAC_MspInit+0x80>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_DAC_MspInit+0x80>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_DAC_MspInit+0x80>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019f6:	2330      	movs	r3, #48	; 0x30
 80019f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fa:	2303      	movs	r3, #3
 80019fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	4805      	ldr	r0, [pc, #20]	; (8001a20 <HAL_DAC_MspInit+0x84>)
 8001a0a:	f001 fa61 	bl	8002ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001a0e:	bf00      	nop
 8001a10:	3728      	adds	r7, #40	; 0x28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40007400 	.word	0x40007400
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40020000 	.word	0x40020000

08001a24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a15      	ldr	r2, [pc, #84]	; (8001a88 <HAL_TIM_PWM_MspInit+0x64>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d10e      	bne.n	8001a54 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <HAL_TIM_PWM_MspInit+0x68>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a13      	ldr	r2, [pc, #76]	; (8001a8c <HAL_TIM_PWM_MspInit+0x68>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_TIM_PWM_MspInit+0x68>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a52:	e012      	b.n	8001a7a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a5c:	d10d      	bne.n	8001a7a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_TIM_PWM_MspInit+0x68>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <HAL_TIM_PWM_MspInit+0x68>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <HAL_TIM_PWM_MspInit+0x68>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	40023800 	.word	0x40023800

08001a90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <HAL_TIM_Base_MspInit+0x48>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d115      	bne.n	8001ace <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <HAL_TIM_Base_MspInit+0x4c>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a0c      	ldr	r2, [pc, #48]	; (8001adc <HAL_TIM_Base_MspInit+0x4c>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_TIM_Base_MspInit+0x4c>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	201d      	movs	r0, #29
 8001ac4:	f001 f837 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ac8:	201d      	movs	r0, #29
 8001aca:	f001 f850 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40000400 	.word	0x40000400
 8001adc:	40023800 	.word	0x40023800

08001ae0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a25      	ldr	r2, [pc, #148]	; (8001b94 <HAL_TIM_MspPostInit+0xb4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d11f      	bne.n	8001b42 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <HAL_TIM_MspPostInit+0xb8>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a23      	ldr	r2, [pc, #140]	; (8001b98 <HAL_TIM_MspPostInit+0xb8>)
 8001b0c:	f043 0310 	orr.w	r3, r3, #16
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <HAL_TIM_MspPostInit+0xb8>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001b1e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b30:	2301      	movs	r3, #1
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4818      	ldr	r0, [pc, #96]	; (8001b9c <HAL_TIM_MspPostInit+0xbc>)
 8001b3c:	f001 f9c8 	bl	8002ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b40:	e023      	b.n	8001b8a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b4a:	d11e      	bne.n	8001b8a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_TIM_MspPostInit+0xb8>)
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	4a10      	ldr	r2, [pc, #64]	; (8001b98 <HAL_TIM_MspPostInit+0xb8>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_TIM_MspPostInit+0xb8>)
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001b68:	f248 0302 	movw	r3, #32770	; 0x8002
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	4806      	ldr	r0, [pc, #24]	; (8001ba0 <HAL_TIM_MspPostInit+0xc0>)
 8001b86:	f001 f9a3 	bl	8002ed0 <HAL_GPIO_Init>
}
 8001b8a:	bf00      	nop
 8001b8c:	3728      	adds	r7, #40	; 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40010000 	.word	0x40010000
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a2c      	ldr	r2, [pc, #176]	; (8001c74 <HAL_UART_MspInit+0xd0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d151      	bne.n	8001c6a <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <HAL_UART_MspInit+0xd4>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	4a2a      	ldr	r2, [pc, #168]	; (8001c78 <HAL_UART_MspInit+0xd4>)
 8001bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd6:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <HAL_UART_MspInit+0xd4>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <HAL_UART_MspInit+0xd4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a23      	ldr	r2, [pc, #140]	; (8001c78 <HAL_UART_MspInit+0xd4>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <HAL_UART_MspInit+0xd4>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_UART_MspInit+0xd4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <HAL_UART_MspInit+0xd4>)
 8001c08:	f043 0308 	orr.w	r3, r3, #8
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <HAL_UART_MspInit+0xd4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c1a:	2308      	movs	r3, #8
 8001c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	4811      	ldr	r0, [pc, #68]	; (8001c7c <HAL_UART_MspInit+0xd8>)
 8001c36:	f001 f94b 	bl	8002ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c3a:	2320      	movs	r3, #32
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c4a:	2307      	movs	r3, #7
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	480a      	ldr	r0, [pc, #40]	; (8001c80 <HAL_UART_MspInit+0xdc>)
 8001c56:	f001 f93b 	bl	8002ed0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2026      	movs	r0, #38	; 0x26
 8001c60:	f000 ff69 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c64:	2026      	movs	r0, #38	; 0x26
 8001c66:	f000 ff82 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c6a:	bf00      	nop
 8001c6c:	3728      	adds	r7, #40	; 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40004400 	.word	0x40004400
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	40020c00 	.word	0x40020c00

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <NMI_Handler+0x4>

08001c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <MemManage_Handler+0x4>

08001c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <BusFault_Handler+0x4>

08001c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <UsageFault_Handler+0x4>

08001ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd0:	f000 f8ae 	bl	8001e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <CAN1_RX0_IRQHandler+0x10>)
 8001cde:	f000 fc1f 	bl	8002520 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000008c 	.word	0x2000008c

08001cec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <TIM3_IRQHandler+0x10>)
 8001cf2:	f002 f911 	bl	8003f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000158 	.word	0x20000158

08001d00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <USART2_IRQHandler+0x10>)
 8001d06:	f003 f80b 	bl	8004d20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200001a0 	.word	0x200001a0

08001d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <SystemInit+0x20>)
 8001d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <SystemInit+0x20>)
 8001d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d3c:	480d      	ldr	r0, [pc, #52]	; (8001d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d3e:	490e      	ldr	r1, [pc, #56]	; (8001d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d40:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d44:	e002      	b.n	8001d4c <LoopCopyDataInit>

08001d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4a:	3304      	adds	r3, #4

08001d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d50:	d3f9      	bcc.n	8001d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d52:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d54:	4c0b      	ldr	r4, [pc, #44]	; (8001d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d58:	e001      	b.n	8001d5e <LoopFillZerobss>

08001d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d5c:	3204      	adds	r2, #4

08001d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d60:	d3fb      	bcc.n	8001d5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d62:	f7ff ffd7 	bl	8001d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d66:	f003 fea1 	bl	8005aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d6a:	f7ff fa4d 	bl	8001208 <main>
  bx  lr    
 8001d6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d7c:	08005b44 	.word	0x08005b44
  ldr r2, =_sbss
 8001d80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d84:	20000248 	.word	0x20000248

08001d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC_IRQHandler>
	...

08001d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d90:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <HAL_Init+0x40>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0d      	ldr	r2, [pc, #52]	; (8001dcc <HAL_Init+0x40>)
 8001d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_Init+0x40>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <HAL_Init+0x40>)
 8001da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <HAL_Init+0x40>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a07      	ldr	r2, [pc, #28]	; (8001dcc <HAL_Init+0x40>)
 8001dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db4:	2003      	movs	r0, #3
 8001db6:	f000 feb3 	bl	8002b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f000 f808 	bl	8001dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc0:	f7ff fd54 	bl	800186c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023c00 	.word	0x40023c00

08001dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_InitTick+0x54>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_InitTick+0x58>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 fecb 	bl	8002b8a <HAL_SYSTICK_Config>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00e      	b.n	8001e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b0f      	cmp	r3, #15
 8001e02:	d80a      	bhi.n	8001e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e04:	2200      	movs	r2, #0
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0c:	f000 fe93 	bl	8002b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e10:	4a06      	ldr	r2, [pc, #24]	; (8001e2c <HAL_InitTick+0x5c>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e000      	b.n	8001e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000064 	.word	0x20000064
 8001e28:	2000006c 	.word	0x2000006c
 8001e2c:	20000068 	.word	0x20000068

08001e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_IncTick+0x20>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_IncTick+0x24>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <HAL_IncTick+0x24>)
 8001e42:	6013      	str	r3, [r2, #0]
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	2000006c 	.word	0x2000006c
 8001e54:	20000244 	.word	0x20000244

08001e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <HAL_GetTick+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000244 	.word	0x20000244

08001e70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0ed      	b.n	800205e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d102      	bne.n	8001e94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fd14 	bl	80018bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea4:	f7ff ffd8 	bl	8001e58 <HAL_GetTick>
 8001ea8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001eaa:	e012      	b.n	8001ed2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001eac:	f7ff ffd4 	bl	8001e58 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b0a      	cmp	r3, #10
 8001eb8:	d90b      	bls.n	8001ed2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2205      	movs	r2, #5
 8001eca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0c5      	b.n	800205e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0e5      	beq.n	8001eac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0202 	bic.w	r2, r2, #2
 8001eee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ef0:	f7ff ffb2 	bl	8001e58 <HAL_GetTick>
 8001ef4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ef6:	e012      	b.n	8001f1e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ef8:	f7ff ffae 	bl	8001e58 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b0a      	cmp	r3, #10
 8001f04:	d90b      	bls.n	8001f1e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2205      	movs	r2, #5
 8001f16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e09f      	b.n	800205e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1e5      	bne.n	8001ef8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7e1b      	ldrb	r3, [r3, #24]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d108      	bne.n	8001f46 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e007      	b.n	8001f56 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	7e5b      	ldrb	r3, [r3, #25]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d108      	bne.n	8001f70 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	e007      	b.n	8001f80 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	7e9b      	ldrb	r3, [r3, #26]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d108      	bne.n	8001f9a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0220 	orr.w	r2, r2, #32
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	e007      	b.n	8001faa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0220 	bic.w	r2, r2, #32
 8001fa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7edb      	ldrb	r3, [r3, #27]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d108      	bne.n	8001fc4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0210 	bic.w	r2, r2, #16
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	e007      	b.n	8001fd4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0210 	orr.w	r2, r2, #16
 8001fd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	7f1b      	ldrb	r3, [r3, #28]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d108      	bne.n	8001fee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0208 	orr.w	r2, r2, #8
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	e007      	b.n	8001ffe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0208 	bic.w	r2, r2, #8
 8001ffc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	7f5b      	ldrb	r3, [r3, #29]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d108      	bne.n	8002018 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0204 	orr.w	r2, r2, #4
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	e007      	b.n	8002028 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0204 	bic.w	r2, r2, #4
 8002026:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	ea42 0103 	orr.w	r1, r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	1e5a      	subs	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800207e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d003      	beq.n	800208e <HAL_CAN_ConfigFilter+0x26>
 8002086:	7cfb      	ldrb	r3, [r7, #19]
 8002088:	2b02      	cmp	r3, #2
 800208a:	f040 80be 	bne.w	800220a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800208e:	4b65      	ldr	r3, [pc, #404]	; (8002224 <HAL_CAN_ConfigFilter+0x1bc>)
 8002090:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	431a      	orrs	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	2201      	movs	r2, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	43db      	mvns	r3, r3
 80020e0:	401a      	ands	r2, r3
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d123      	bne.n	8002138 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	401a      	ands	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002112:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	3248      	adds	r2, #72	; 0x48
 8002118:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800212c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800212e:	6979      	ldr	r1, [r7, #20]
 8002130:	3348      	adds	r3, #72	; 0x48
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d122      	bne.n	8002186 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	431a      	orrs	r2, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002160:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	3248      	adds	r2, #72	; 0x48
 8002166:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800217a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800217c:	6979      	ldr	r1, [r7, #20]
 800217e:	3348      	adds	r3, #72	; 0x48
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	440b      	add	r3, r1
 8002184:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43db      	mvns	r3, r3
 8002198:	401a      	ands	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80021a0:	e007      	b.n	80021b2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	43db      	mvns	r3, r3
 80021c4:	401a      	ands	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80021cc:	e007      	b.n	80021de <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d107      	bne.n	80021f6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021fc:	f023 0201 	bic.w	r2, r3, #1
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e006      	b.n	8002218 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
  }
}
 8002218:	4618      	mov	r0, r3
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40006400 	.word	0x40006400

08002228 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d12e      	bne.n	800229a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002254:	f7ff fe00 	bl	8001e58 <HAL_GetTick>
 8002258:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800225a:	e012      	b.n	8002282 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800225c:	f7ff fdfc 	bl	8001e58 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b0a      	cmp	r3, #10
 8002268:	d90b      	bls.n	8002282 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2205      	movs	r2, #5
 800227a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e012      	b.n	80022a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1e5      	bne.n	800225c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e006      	b.n	80022a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
  }
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80022c6:	7dfb      	ldrb	r3, [r7, #23]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d003      	beq.n	80022d4 <HAL_CAN_GetRxMessage+0x24>
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	f040 80f3 	bne.w	80024ba <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10e      	bne.n	80022f8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d116      	bne.n	8002316 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0e7      	b.n	80024c8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d107      	bne.n	8002316 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0d8      	b.n	80024c8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	331b      	adds	r3, #27
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	4413      	add	r3, r2
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0204 	and.w	r2, r3, #4
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10c      	bne.n	800234e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	331b      	adds	r3, #27
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	4413      	add	r3, r2
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	0d5b      	lsrs	r3, r3, #21
 8002344:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e00b      	b.n	8002366 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	331b      	adds	r3, #27
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	4413      	add	r3, r2
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	08db      	lsrs	r3, r3, #3
 800235e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	331b      	adds	r3, #27
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	4413      	add	r3, r2
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0202 	and.w	r2, r3, #2
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	331b      	adds	r3, #27
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	4413      	add	r3, r2
 8002388:	3304      	adds	r3, #4
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 020f 	and.w	r2, r3, #15
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	331b      	adds	r3, #27
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	4413      	add	r3, r2
 80023a0:	3304      	adds	r3, #4
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	331b      	adds	r3, #27
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	4413      	add	r3, r2
 80023b8:	3304      	adds	r3, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0c1b      	lsrs	r3, r3, #16
 80023be:	b29a      	uxth	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	0a1a      	lsrs	r2, r3, #8
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	3301      	adds	r3, #1
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0c1a      	lsrs	r2, r3, #16
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	3302      	adds	r3, #2
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	4413      	add	r3, r2
 8002418:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0e1a      	lsrs	r2, r3, #24
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	3303      	adds	r3, #3
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	4413      	add	r3, r2
 8002432:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	3304      	adds	r3, #4
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	4413      	add	r3, r2
 800244a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0a1a      	lsrs	r2, r3, #8
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	3305      	adds	r3, #5
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	4413      	add	r3, r2
 8002464:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0c1a      	lsrs	r2, r3, #16
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	3306      	adds	r3, #6
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	4413      	add	r3, r2
 800247e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0e1a      	lsrs	r2, r3, #24
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	3307      	adds	r3, #7
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d108      	bne.n	80024a6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0220 	orr.w	r2, r2, #32
 80024a2:	60da      	str	r2, [r3, #12]
 80024a4:	e007      	b.n	80024b6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0220 	orr.w	r2, r2, #32
 80024b4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e006      	b.n	80024c8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
  }
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d002      	beq.n	80024f2 <HAL_CAN_ActivateNotification+0x1e>
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d109      	bne.n	8002506 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6959      	ldr	r1, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e006      	b.n	8002514 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
  }
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002528:	2300      	movs	r3, #0
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d07c      	beq.n	8002660 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d023      	beq.n	80025b8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2201      	movs	r2, #1
 8002576:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f983 	bl	800288e <HAL_CAN_TxMailbox0CompleteCallback>
 8002588:	e016      	b.n	80025b8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d004      	beq.n	800259e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
 800259c:	e00c      	b.n	80025b8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d004      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
 80025b0:	e002      	b.n	80025b8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f989 	bl	80028ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d024      	beq.n	800260c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f963 	bl	80028a2 <HAL_CAN_TxMailbox1CompleteCallback>
 80025dc:	e016      	b.n	800260c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d004      	beq.n	80025f2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
 80025f0:	e00c      	b.n	800260c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d004      	beq.n	8002606 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
 8002604:	e002      	b.n	800260c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f969 	bl	80028de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d024      	beq.n	8002660 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800261e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f943 	bl	80028b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002630:	e016      	b.n	8002660 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d004      	beq.n	8002646 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
 8002644:	e00c      	b.n	8002660 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
 8002658:	e002      	b.n	8002660 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f949 	bl	80028f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00c      	beq.n	8002684 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b00      	cmp	r3, #0
 8002672:	d007      	beq.n	8002684 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800267a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2210      	movs	r2, #16
 8002682:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00b      	beq.n	80026a6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d006      	beq.n	80026a6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2208      	movs	r2, #8
 800269e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f930 	bl	8002906 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d009      	beq.n	80026c4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fe fbce 	bl	8000e60 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00c      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d007      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2210      	movs	r2, #16
 80026e6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d006      	beq.n	800270a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2208      	movs	r2, #8
 8002702:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f912 	bl	800292e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	d009      	beq.n	8002728 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f8f9 	bl	800291a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	d006      	beq.n	800274a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2210      	movs	r2, #16
 8002742:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f8fc 	bl	8002942 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00b      	beq.n	800276c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d006      	beq.n	800276c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2208      	movs	r2, #8
 8002764:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f8f5 	bl	8002956 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d07b      	beq.n	800286e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d072      	beq.n	8002866 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d008      	beq.n	800279c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d008      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	f043 0302 	orr.w	r3, r3, #2
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	f043 0304 	orr.w	r3, r3, #4
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d043      	beq.n	8002866 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d03e      	beq.n	8002866 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027ee:	2b60      	cmp	r3, #96	; 0x60
 80027f0:	d02b      	beq.n	800284a <HAL_CAN_IRQHandler+0x32a>
 80027f2:	2b60      	cmp	r3, #96	; 0x60
 80027f4:	d82e      	bhi.n	8002854 <HAL_CAN_IRQHandler+0x334>
 80027f6:	2b50      	cmp	r3, #80	; 0x50
 80027f8:	d022      	beq.n	8002840 <HAL_CAN_IRQHandler+0x320>
 80027fa:	2b50      	cmp	r3, #80	; 0x50
 80027fc:	d82a      	bhi.n	8002854 <HAL_CAN_IRQHandler+0x334>
 80027fe:	2b40      	cmp	r3, #64	; 0x40
 8002800:	d019      	beq.n	8002836 <HAL_CAN_IRQHandler+0x316>
 8002802:	2b40      	cmp	r3, #64	; 0x40
 8002804:	d826      	bhi.n	8002854 <HAL_CAN_IRQHandler+0x334>
 8002806:	2b30      	cmp	r3, #48	; 0x30
 8002808:	d010      	beq.n	800282c <HAL_CAN_IRQHandler+0x30c>
 800280a:	2b30      	cmp	r3, #48	; 0x30
 800280c:	d822      	bhi.n	8002854 <HAL_CAN_IRQHandler+0x334>
 800280e:	2b10      	cmp	r3, #16
 8002810:	d002      	beq.n	8002818 <HAL_CAN_IRQHandler+0x2f8>
 8002812:	2b20      	cmp	r3, #32
 8002814:	d005      	beq.n	8002822 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002816:	e01d      	b.n	8002854 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	f043 0308 	orr.w	r3, r3, #8
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002820:	e019      	b.n	8002856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	f043 0310 	orr.w	r3, r3, #16
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800282a:	e014      	b.n	8002856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	f043 0320 	orr.w	r3, r3, #32
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002834:	e00f      	b.n	8002856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800283e:	e00a      	b.n	8002856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002848:	e005      	b.n	8002856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002852:	e000      	b.n	8002856 <HAL_CAN_IRQHandler+0x336>
            break;
 8002854:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002864:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2204      	movs	r2, #4
 800286c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f872 	bl	800296a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002886:	bf00      	nop
 8002888:	3728      	adds	r7, #40	; 0x28
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029b2:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	60d3      	str	r3, [r2, #12]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	f003 0307 	and.w	r3, r3, #7
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	db0b      	blt.n	8002a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4907      	ldr	r1, [pc, #28]	; (8002a1c <__NVIC_EnableIRQ+0x38>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2001      	movs	r0, #1
 8002a06:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	db0a      	blt.n	8002a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	490c      	ldr	r1, [pc, #48]	; (8002a6c <__NVIC_SetPriority+0x4c>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	440b      	add	r3, r1
 8002a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a48:	e00a      	b.n	8002a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4908      	ldr	r1, [pc, #32]	; (8002a70 <__NVIC_SetPriority+0x50>)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	3b04      	subs	r3, #4
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	761a      	strb	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000e100 	.word	0xe000e100
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f1c3 0307 	rsb	r3, r3, #7
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	bf28      	it	cs
 8002a92:	2304      	movcs	r3, #4
 8002a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d902      	bls.n	8002aa4 <NVIC_EncodePriority+0x30>
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3b03      	subs	r3, #3
 8002aa2:	e000      	b.n	8002aa6 <NVIC_EncodePriority+0x32>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002abc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	4313      	orrs	r3, r2
         );
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aec:	d301      	bcc.n	8002af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aee:	2301      	movs	r3, #1
 8002af0:	e00f      	b.n	8002b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af2:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <SysTick_Config+0x40>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afa:	210f      	movs	r1, #15
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295
 8002b00:	f7ff ff8e 	bl	8002a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <SysTick_Config+0x40>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0a:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <SysTick_Config+0x40>)
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	e000e010 	.word	0xe000e010

08002b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ff29 	bl	8002980 <__NVIC_SetPriorityGrouping>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b48:	f7ff ff3e 	bl	80029c8 <__NVIC_GetPriorityGrouping>
 8002b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	6978      	ldr	r0, [r7, #20]
 8002b54:	f7ff ff8e 	bl	8002a74 <NVIC_EncodePriority>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff5d 	bl	8002a20 <__NVIC_SetPriority>
}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff31 	bl	80029e4 <__NVIC_EnableIRQ>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ffa2 	bl	8002adc <SysTick_Config>
 8002b98:	4603      	mov	r3, r0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e014      	b.n	8002bde <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	791b      	ldrb	r3, [r3, #4]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d105      	bne.n	8002bca <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7fe fee9 	bl	800199c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	795b      	ldrb	r3, [r3, #5]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_DAC_Start+0x16>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e040      	b.n	8002c7e <HAL_DAC_Start+0x98>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6819      	ldr	r1, [r3, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2201      	movs	r2, #1
 8002c16:	409a      	lsls	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10f      	bne.n	8002c46 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002c30:	2b3c      	cmp	r3, #60	; 0x3c
 8002c32:	d11d      	bne.n	8002c70 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	e014      	b.n	8002c70 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	213c      	movs	r1, #60	; 0x3c
 8002c58:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d107      	bne.n	8002c70 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0202 	orr.w	r2, r2, #2
 8002c6e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6819      	ldr	r1, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	400a      	ands	r2, r1
 8002cae:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d105      	bne.n	8002cee <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3308      	adds	r3, #8
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	e004      	b.n	8002cf8 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3314      	adds	r3, #20
 8002cf6:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	371c      	adds	r7, #28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b087      	sub	sp, #28
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	795b      	ldrb	r3, [r3, #5]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_DAC_ConfigChannel+0x18>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e03c      	b.n	8002da0 <HAL_DAC_ConfigChannel+0x92>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6819      	ldr	r1, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	22c0      	movs	r2, #192	; 0xc0
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43da      	mvns	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	400a      	ands	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2201      	movs	r2, #1
 8002d96:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dba:	f7ff f84d 	bl	8001e58 <HAL_GetTick>
 8002dbe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d008      	beq.n	8002dde <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e052      	b.n	8002e84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0216 	bic.w	r2, r2, #22
 8002dec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dfc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d103      	bne.n	8002e0e <HAL_DMA_Abort+0x62>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d007      	beq.n	8002e1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0208 	bic.w	r2, r2, #8
 8002e1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e2e:	e013      	b.n	8002e58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e30:	f7ff f812 	bl	8001e58 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b05      	cmp	r3, #5
 8002e3c:	d90c      	bls.n	8002e58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2203      	movs	r2, #3
 8002e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e015      	b.n	8002e84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1e4      	bne.n	8002e30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6a:	223f      	movs	r2, #63	; 0x3f
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d004      	beq.n	8002eaa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2280      	movs	r2, #128	; 0x80
 8002ea4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e00c      	b.n	8002ec4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2205      	movs	r2, #5
 8002eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0201 	bic.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	; 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	e16b      	b.n	80031c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002eec:	2201      	movs	r2, #1
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	f040 815a 	bne.w	80031be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d005      	beq.n	8002f22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d130      	bne.n	8002f84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f58:	2201      	movs	r2, #1
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	f003 0201 	and.w	r2, r3, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d017      	beq.n	8002fc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d123      	bne.n	8003014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	08da      	lsrs	r2, r3, #3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3208      	adds	r2, #8
 8002fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	220f      	movs	r2, #15
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	08da      	lsrs	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3208      	adds	r2, #8
 800300e:	69b9      	ldr	r1, [r7, #24]
 8003010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	2203      	movs	r2, #3
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0203 	and.w	r2, r3, #3
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80b4 	beq.w	80031be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	4b60      	ldr	r3, [pc, #384]	; (80031dc <HAL_GPIO_Init+0x30c>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	4a5f      	ldr	r2, [pc, #380]	; (80031dc <HAL_GPIO_Init+0x30c>)
 8003060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003064:	6453      	str	r3, [r2, #68]	; 0x44
 8003066:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <HAL_GPIO_Init+0x30c>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003072:	4a5b      	ldr	r2, [pc, #364]	; (80031e0 <HAL_GPIO_Init+0x310>)
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	089b      	lsrs	r3, r3, #2
 8003078:	3302      	adds	r3, #2
 800307a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	220f      	movs	r2, #15
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a52      	ldr	r2, [pc, #328]	; (80031e4 <HAL_GPIO_Init+0x314>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d02b      	beq.n	80030f6 <HAL_GPIO_Init+0x226>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a51      	ldr	r2, [pc, #324]	; (80031e8 <HAL_GPIO_Init+0x318>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d025      	beq.n	80030f2 <HAL_GPIO_Init+0x222>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a50      	ldr	r2, [pc, #320]	; (80031ec <HAL_GPIO_Init+0x31c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01f      	beq.n	80030ee <HAL_GPIO_Init+0x21e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a4f      	ldr	r2, [pc, #316]	; (80031f0 <HAL_GPIO_Init+0x320>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d019      	beq.n	80030ea <HAL_GPIO_Init+0x21a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4e      	ldr	r2, [pc, #312]	; (80031f4 <HAL_GPIO_Init+0x324>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_GPIO_Init+0x216>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4d      	ldr	r2, [pc, #308]	; (80031f8 <HAL_GPIO_Init+0x328>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00d      	beq.n	80030e2 <HAL_GPIO_Init+0x212>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4c      	ldr	r2, [pc, #304]	; (80031fc <HAL_GPIO_Init+0x32c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <HAL_GPIO_Init+0x20e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4b      	ldr	r2, [pc, #300]	; (8003200 <HAL_GPIO_Init+0x330>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_GPIO_Init+0x20a>
 80030d6:	2307      	movs	r3, #7
 80030d8:	e00e      	b.n	80030f8 <HAL_GPIO_Init+0x228>
 80030da:	2308      	movs	r3, #8
 80030dc:	e00c      	b.n	80030f8 <HAL_GPIO_Init+0x228>
 80030de:	2306      	movs	r3, #6
 80030e0:	e00a      	b.n	80030f8 <HAL_GPIO_Init+0x228>
 80030e2:	2305      	movs	r3, #5
 80030e4:	e008      	b.n	80030f8 <HAL_GPIO_Init+0x228>
 80030e6:	2304      	movs	r3, #4
 80030e8:	e006      	b.n	80030f8 <HAL_GPIO_Init+0x228>
 80030ea:	2303      	movs	r3, #3
 80030ec:	e004      	b.n	80030f8 <HAL_GPIO_Init+0x228>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e002      	b.n	80030f8 <HAL_GPIO_Init+0x228>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <HAL_GPIO_Init+0x228>
 80030f6:	2300      	movs	r3, #0
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	f002 0203 	and.w	r2, r2, #3
 80030fe:	0092      	lsls	r2, r2, #2
 8003100:	4093      	lsls	r3, r2
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003108:	4935      	ldr	r1, [pc, #212]	; (80031e0 <HAL_GPIO_Init+0x310>)
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	089b      	lsrs	r3, r3, #2
 800310e:	3302      	adds	r3, #2
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003116:	4b3b      	ldr	r3, [pc, #236]	; (8003204 <HAL_GPIO_Init+0x334>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	43db      	mvns	r3, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4013      	ands	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800313a:	4a32      	ldr	r2, [pc, #200]	; (8003204 <HAL_GPIO_Init+0x334>)
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003140:	4b30      	ldr	r3, [pc, #192]	; (8003204 <HAL_GPIO_Init+0x334>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003164:	4a27      	ldr	r2, [pc, #156]	; (8003204 <HAL_GPIO_Init+0x334>)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800316a:	4b26      	ldr	r3, [pc, #152]	; (8003204 <HAL_GPIO_Init+0x334>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800318e:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <HAL_GPIO_Init+0x334>)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003194:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <HAL_GPIO_Init+0x334>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031b8:	4a12      	ldr	r2, [pc, #72]	; (8003204 <HAL_GPIO_Init+0x334>)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3301      	adds	r3, #1
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	2b0f      	cmp	r3, #15
 80031c8:	f67f ae90 	bls.w	8002eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031cc:	bf00      	nop
 80031ce:	bf00      	nop
 80031d0:	3724      	adds	r7, #36	; 0x24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40013800 	.word	0x40013800
 80031e4:	40020000 	.word	0x40020000
 80031e8:	40020400 	.word	0x40020400
 80031ec:	40020800 	.word	0x40020800
 80031f0:	40020c00 	.word	0x40020c00
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40021400 	.word	0x40021400
 80031fc:	40021800 	.word	0x40021800
 8003200:	40021c00 	.word	0x40021c00
 8003204:	40013c00 	.word	0x40013c00

08003208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	807b      	strh	r3, [r7, #2]
 8003214:	4613      	mov	r3, r2
 8003216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003218:	787b      	ldrb	r3, [r7, #1]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800321e:	887a      	ldrh	r2, [r7, #2]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003224:	e003      	b.n	800322e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003226:	887b      	ldrh	r3, [r7, #2]
 8003228:	041a      	lsls	r2, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	619a      	str	r2, [r3, #24]
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e267      	b.n	800371e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d075      	beq.n	8003346 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800325a:	4b88      	ldr	r3, [pc, #544]	; (800347c <HAL_RCC_OscConfig+0x240>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b04      	cmp	r3, #4
 8003264:	d00c      	beq.n	8003280 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003266:	4b85      	ldr	r3, [pc, #532]	; (800347c <HAL_RCC_OscConfig+0x240>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800326e:	2b08      	cmp	r3, #8
 8003270:	d112      	bne.n	8003298 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003272:	4b82      	ldr	r3, [pc, #520]	; (800347c <HAL_RCC_OscConfig+0x240>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800327e:	d10b      	bne.n	8003298 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003280:	4b7e      	ldr	r3, [pc, #504]	; (800347c <HAL_RCC_OscConfig+0x240>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d05b      	beq.n	8003344 <HAL_RCC_OscConfig+0x108>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d157      	bne.n	8003344 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e242      	b.n	800371e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a0:	d106      	bne.n	80032b0 <HAL_RCC_OscConfig+0x74>
 80032a2:	4b76      	ldr	r3, [pc, #472]	; (800347c <HAL_RCC_OscConfig+0x240>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a75      	ldr	r2, [pc, #468]	; (800347c <HAL_RCC_OscConfig+0x240>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e01d      	b.n	80032ec <HAL_RCC_OscConfig+0xb0>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0x98>
 80032ba:	4b70      	ldr	r3, [pc, #448]	; (800347c <HAL_RCC_OscConfig+0x240>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6f      	ldr	r2, [pc, #444]	; (800347c <HAL_RCC_OscConfig+0x240>)
 80032c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	4b6d      	ldr	r3, [pc, #436]	; (800347c <HAL_RCC_OscConfig+0x240>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a6c      	ldr	r2, [pc, #432]	; (800347c <HAL_RCC_OscConfig+0x240>)
 80032cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	e00b      	b.n	80032ec <HAL_RCC_OscConfig+0xb0>
 80032d4:	4b69      	ldr	r3, [pc, #420]	; (800347c <HAL_RCC_OscConfig+0x240>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a68      	ldr	r2, [pc, #416]	; (800347c <HAL_RCC_OscConfig+0x240>)
 80032da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	4b66      	ldr	r3, [pc, #408]	; (800347c <HAL_RCC_OscConfig+0x240>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a65      	ldr	r2, [pc, #404]	; (800347c <HAL_RCC_OscConfig+0x240>)
 80032e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d013      	beq.n	800331c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe fdb0 	bl	8001e58 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032fc:	f7fe fdac 	bl	8001e58 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	; 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e207      	b.n	800371e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330e:	4b5b      	ldr	r3, [pc, #364]	; (800347c <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0xc0>
 800331a:	e014      	b.n	8003346 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7fe fd9c 	bl	8001e58 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003324:	f7fe fd98 	bl	8001e58 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	; 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e1f3      	b.n	800371e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003336:	4b51      	ldr	r3, [pc, #324]	; (800347c <HAL_RCC_OscConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0xe8>
 8003342:	e000      	b.n	8003346 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d063      	beq.n	800341a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003352:	4b4a      	ldr	r3, [pc, #296]	; (800347c <HAL_RCC_OscConfig+0x240>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00b      	beq.n	8003376 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800335e:	4b47      	ldr	r3, [pc, #284]	; (800347c <HAL_RCC_OscConfig+0x240>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003366:	2b08      	cmp	r3, #8
 8003368:	d11c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800336a:	4b44      	ldr	r3, [pc, #272]	; (800347c <HAL_RCC_OscConfig+0x240>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d116      	bne.n	80033a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003376:	4b41      	ldr	r3, [pc, #260]	; (800347c <HAL_RCC_OscConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <HAL_RCC_OscConfig+0x152>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d001      	beq.n	800338e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e1c7      	b.n	800371e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338e:	4b3b      	ldr	r3, [pc, #236]	; (800347c <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4937      	ldr	r1, [pc, #220]	; (800347c <HAL_RCC_OscConfig+0x240>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a2:	e03a      	b.n	800341a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d020      	beq.n	80033ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033ac:	4b34      	ldr	r3, [pc, #208]	; (8003480 <HAL_RCC_OscConfig+0x244>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b2:	f7fe fd51 	bl	8001e58 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ba:	f7fe fd4d 	bl	8001e58 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e1a8      	b.n	800371e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033cc:	4b2b      	ldr	r3, [pc, #172]	; (800347c <HAL_RCC_OscConfig+0x240>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d8:	4b28      	ldr	r3, [pc, #160]	; (800347c <HAL_RCC_OscConfig+0x240>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4925      	ldr	r1, [pc, #148]	; (800347c <HAL_RCC_OscConfig+0x240>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	600b      	str	r3, [r1, #0]
 80033ec:	e015      	b.n	800341a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ee:	4b24      	ldr	r3, [pc, #144]	; (8003480 <HAL_RCC_OscConfig+0x244>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fe fd30 	bl	8001e58 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033fc:	f7fe fd2c 	bl	8001e58 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e187      	b.n	800371e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800340e:	4b1b      	ldr	r3, [pc, #108]	; (800347c <HAL_RCC_OscConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d036      	beq.n	8003494 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d016      	beq.n	800345c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800342e:	4b15      	ldr	r3, [pc, #84]	; (8003484 <HAL_RCC_OscConfig+0x248>)
 8003430:	2201      	movs	r2, #1
 8003432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003434:	f7fe fd10 	bl	8001e58 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800343c:	f7fe fd0c 	bl	8001e58 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e167      	b.n	800371e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800344e:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_RCC_OscConfig+0x240>)
 8003450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x200>
 800345a:	e01b      	b.n	8003494 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800345c:	4b09      	ldr	r3, [pc, #36]	; (8003484 <HAL_RCC_OscConfig+0x248>)
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003462:	f7fe fcf9 	bl	8001e58 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003468:	e00e      	b.n	8003488 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800346a:	f7fe fcf5 	bl	8001e58 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d907      	bls.n	8003488 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e150      	b.n	800371e <HAL_RCC_OscConfig+0x4e2>
 800347c:	40023800 	.word	0x40023800
 8003480:	42470000 	.word	0x42470000
 8003484:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003488:	4b88      	ldr	r3, [pc, #544]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 800348a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1ea      	bne.n	800346a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 8097 	beq.w	80035d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a2:	2300      	movs	r3, #0
 80034a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a6:	4b81      	ldr	r3, [pc, #516]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10f      	bne.n	80034d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	4b7d      	ldr	r3, [pc, #500]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	4a7c      	ldr	r2, [pc, #496]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 80034bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c0:	6413      	str	r3, [r2, #64]	; 0x40
 80034c2:	4b7a      	ldr	r3, [pc, #488]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ce:	2301      	movs	r3, #1
 80034d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d2:	4b77      	ldr	r3, [pc, #476]	; (80036b0 <HAL_RCC_OscConfig+0x474>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d118      	bne.n	8003510 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034de:	4b74      	ldr	r3, [pc, #464]	; (80036b0 <HAL_RCC_OscConfig+0x474>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a73      	ldr	r2, [pc, #460]	; (80036b0 <HAL_RCC_OscConfig+0x474>)
 80034e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ea:	f7fe fcb5 	bl	8001e58 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f2:	f7fe fcb1 	bl	8001e58 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e10c      	b.n	800371e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003504:	4b6a      	ldr	r3, [pc, #424]	; (80036b0 <HAL_RCC_OscConfig+0x474>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d106      	bne.n	8003526 <HAL_RCC_OscConfig+0x2ea>
 8003518:	4b64      	ldr	r3, [pc, #400]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	4a63      	ldr	r2, [pc, #396]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	6713      	str	r3, [r2, #112]	; 0x70
 8003524:	e01c      	b.n	8003560 <HAL_RCC_OscConfig+0x324>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b05      	cmp	r3, #5
 800352c:	d10c      	bne.n	8003548 <HAL_RCC_OscConfig+0x30c>
 800352e:	4b5f      	ldr	r3, [pc, #380]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 8003530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003532:	4a5e      	ldr	r2, [pc, #376]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 8003534:	f043 0304 	orr.w	r3, r3, #4
 8003538:	6713      	str	r3, [r2, #112]	; 0x70
 800353a:	4b5c      	ldr	r3, [pc, #368]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 800353c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353e:	4a5b      	ldr	r2, [pc, #364]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6713      	str	r3, [r2, #112]	; 0x70
 8003546:	e00b      	b.n	8003560 <HAL_RCC_OscConfig+0x324>
 8003548:	4b58      	ldr	r3, [pc, #352]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 800354a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354c:	4a57      	ldr	r2, [pc, #348]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 800354e:	f023 0301 	bic.w	r3, r3, #1
 8003552:	6713      	str	r3, [r2, #112]	; 0x70
 8003554:	4b55      	ldr	r3, [pc, #340]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	4a54      	ldr	r2, [pc, #336]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 800355a:	f023 0304 	bic.w	r3, r3, #4
 800355e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d015      	beq.n	8003594 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fe fc76 	bl	8001e58 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356e:	e00a      	b.n	8003586 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003570:	f7fe fc72 	bl	8001e58 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	f241 3288 	movw	r2, #5000	; 0x1388
 800357e:	4293      	cmp	r3, r2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e0cb      	b.n	800371e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003586:	4b49      	ldr	r3, [pc, #292]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0ee      	beq.n	8003570 <HAL_RCC_OscConfig+0x334>
 8003592:	e014      	b.n	80035be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003594:	f7fe fc60 	bl	8001e58 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359a:	e00a      	b.n	80035b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800359c:	f7fe fc5c 	bl	8001e58 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e0b5      	b.n	800371e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b2:	4b3e      	ldr	r3, [pc, #248]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1ee      	bne.n	800359c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035be:	7dfb      	ldrb	r3, [r7, #23]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d105      	bne.n	80035d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c4:	4b39      	ldr	r3, [pc, #228]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	4a38      	ldr	r2, [pc, #224]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 80035ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80a1 	beq.w	800371c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035da:	4b34      	ldr	r3, [pc, #208]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d05c      	beq.n	80036a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d141      	bne.n	8003672 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ee:	4b31      	ldr	r3, [pc, #196]	; (80036b4 <HAL_RCC_OscConfig+0x478>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fe fc30 	bl	8001e58 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fe fc2c 	bl	8001e58 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e087      	b.n	800371e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360e:	4b27      	ldr	r3, [pc, #156]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69da      	ldr	r2, [r3, #28]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	019b      	lsls	r3, r3, #6
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	085b      	lsrs	r3, r3, #1
 8003632:	3b01      	subs	r3, #1
 8003634:	041b      	lsls	r3, r3, #16
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	061b      	lsls	r3, r3, #24
 800363e:	491b      	ldr	r1, [pc, #108]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 8003640:	4313      	orrs	r3, r2
 8003642:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003644:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <HAL_RCC_OscConfig+0x478>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364a:	f7fe fc05 	bl	8001e58 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003652:	f7fe fc01 	bl	8001e58 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e05c      	b.n	800371e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003664:	4b11      	ldr	r3, [pc, #68]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x416>
 8003670:	e054      	b.n	800371c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <HAL_RCC_OscConfig+0x478>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fe fbee 	bl	8001e58 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003680:	f7fe fbea 	bl	8001e58 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e045      	b.n	800371e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003692:	4b06      	ldr	r3, [pc, #24]	; (80036ac <HAL_RCC_OscConfig+0x470>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x444>
 800369e:	e03d      	b.n	800371c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d107      	bne.n	80036b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e038      	b.n	800371e <HAL_RCC_OscConfig+0x4e2>
 80036ac:	40023800 	.word	0x40023800
 80036b0:	40007000 	.word	0x40007000
 80036b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036b8:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <HAL_RCC_OscConfig+0x4ec>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d028      	beq.n	8003718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d121      	bne.n	8003718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036de:	429a      	cmp	r2, r3
 80036e0:	d11a      	bne.n	8003718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036e8:	4013      	ands	r3, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d111      	bne.n	8003718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fe:	085b      	lsrs	r3, r3, #1
 8003700:	3b01      	subs	r3, #1
 8003702:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003704:	429a      	cmp	r2, r3
 8003706:	d107      	bne.n	8003718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003714:	429a      	cmp	r2, r3
 8003716:	d001      	beq.n	800371c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40023800 	.word	0x40023800

0800372c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0cc      	b.n	80038da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003740:	4b68      	ldr	r3, [pc, #416]	; (80038e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d90c      	bls.n	8003768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374e:	4b65      	ldr	r3, [pc, #404]	; (80038e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003756:	4b63      	ldr	r3, [pc, #396]	; (80038e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0b8      	b.n	80038da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d020      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003780:	4b59      	ldr	r3, [pc, #356]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	4a58      	ldr	r2, [pc, #352]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800378a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003798:	4b53      	ldr	r3, [pc, #332]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	4a52      	ldr	r2, [pc, #328]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a4:	4b50      	ldr	r3, [pc, #320]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	494d      	ldr	r1, [pc, #308]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d044      	beq.n	800384c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d107      	bne.n	80037da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ca:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d119      	bne.n	800380a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e07f      	b.n	80038da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d003      	beq.n	80037ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d107      	bne.n	80037fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ea:	4b3f      	ldr	r3, [pc, #252]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e06f      	b.n	80038da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fa:	4b3b      	ldr	r3, [pc, #236]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e067      	b.n	80038da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800380a:	4b37      	ldr	r3, [pc, #220]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f023 0203 	bic.w	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	4934      	ldr	r1, [pc, #208]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	4313      	orrs	r3, r2
 800381a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800381c:	f7fe fb1c 	bl	8001e58 <HAL_GetTick>
 8003820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003822:	e00a      	b.n	800383a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003824:	f7fe fb18 	bl	8001e58 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e04f      	b.n	80038da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383a:	4b2b      	ldr	r3, [pc, #172]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 020c 	and.w	r2, r3, #12
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	429a      	cmp	r2, r3
 800384a:	d1eb      	bne.n	8003824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800384c:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <HAL_RCC_ClockConfig+0x1b8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d20c      	bcs.n	8003874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b22      	ldr	r3, [pc, #136]	; (80038e4 <HAL_RCC_ClockConfig+0x1b8>)
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003862:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d001      	beq.n	8003874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e032      	b.n	80038da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003880:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4916      	ldr	r1, [pc, #88]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	4313      	orrs	r3, r2
 8003890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800389e:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	490e      	ldr	r1, [pc, #56]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038b2:	f000 f821 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 80038b6:	4602      	mov	r2, r0
 80038b8:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	490a      	ldr	r1, [pc, #40]	; (80038ec <HAL_RCC_ClockConfig+0x1c0>)
 80038c4:	5ccb      	ldrb	r3, [r1, r3]
 80038c6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ca:	4a09      	ldr	r2, [pc, #36]	; (80038f0 <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038ce:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <HAL_RCC_ClockConfig+0x1c8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe fa7c 	bl	8001dd0 <HAL_InitTick>

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023c00 	.word	0x40023c00
 80038e8:	40023800 	.word	0x40023800
 80038ec:	08005b1c 	.word	0x08005b1c
 80038f0:	20000064 	.word	0x20000064
 80038f4:	20000068 	.word	0x20000068

080038f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038fc:	b094      	sub	sp, #80	; 0x50
 80038fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	647b      	str	r3, [r7, #68]	; 0x44
 8003904:	2300      	movs	r3, #0
 8003906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003908:	2300      	movs	r3, #0
 800390a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003910:	4b79      	ldr	r3, [pc, #484]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 030c 	and.w	r3, r3, #12
 8003918:	2b08      	cmp	r3, #8
 800391a:	d00d      	beq.n	8003938 <HAL_RCC_GetSysClockFreq+0x40>
 800391c:	2b08      	cmp	r3, #8
 800391e:	f200 80e1 	bhi.w	8003ae4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x34>
 8003926:	2b04      	cmp	r3, #4
 8003928:	d003      	beq.n	8003932 <HAL_RCC_GetSysClockFreq+0x3a>
 800392a:	e0db      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800392c:	4b73      	ldr	r3, [pc, #460]	; (8003afc <HAL_RCC_GetSysClockFreq+0x204>)
 800392e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003930:	e0db      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003932:	4b73      	ldr	r3, [pc, #460]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x208>)
 8003934:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003936:	e0d8      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003938:	4b6f      	ldr	r3, [pc, #444]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x200>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003940:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003942:	4b6d      	ldr	r3, [pc, #436]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d063      	beq.n	8003a16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800394e:	4b6a      	ldr	r3, [pc, #424]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	099b      	lsrs	r3, r3, #6
 8003954:	2200      	movs	r2, #0
 8003956:	63bb      	str	r3, [r7, #56]	; 0x38
 8003958:	63fa      	str	r2, [r7, #60]	; 0x3c
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003960:	633b      	str	r3, [r7, #48]	; 0x30
 8003962:	2300      	movs	r3, #0
 8003964:	637b      	str	r3, [r7, #52]	; 0x34
 8003966:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800396a:	4622      	mov	r2, r4
 800396c:	462b      	mov	r3, r5
 800396e:	f04f 0000 	mov.w	r0, #0
 8003972:	f04f 0100 	mov.w	r1, #0
 8003976:	0159      	lsls	r1, r3, #5
 8003978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800397c:	0150      	lsls	r0, r2, #5
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4621      	mov	r1, r4
 8003984:	1a51      	subs	r1, r2, r1
 8003986:	6139      	str	r1, [r7, #16]
 8003988:	4629      	mov	r1, r5
 800398a:	eb63 0301 	sbc.w	r3, r3, r1
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800399c:	4659      	mov	r1, fp
 800399e:	018b      	lsls	r3, r1, #6
 80039a0:	4651      	mov	r1, sl
 80039a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039a6:	4651      	mov	r1, sl
 80039a8:	018a      	lsls	r2, r1, #6
 80039aa:	4651      	mov	r1, sl
 80039ac:	ebb2 0801 	subs.w	r8, r2, r1
 80039b0:	4659      	mov	r1, fp
 80039b2:	eb63 0901 	sbc.w	r9, r3, r1
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ca:	4690      	mov	r8, r2
 80039cc:	4699      	mov	r9, r3
 80039ce:	4623      	mov	r3, r4
 80039d0:	eb18 0303 	adds.w	r3, r8, r3
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	462b      	mov	r3, r5
 80039d8:	eb49 0303 	adc.w	r3, r9, r3
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039ea:	4629      	mov	r1, r5
 80039ec:	024b      	lsls	r3, r1, #9
 80039ee:	4621      	mov	r1, r4
 80039f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039f4:	4621      	mov	r1, r4
 80039f6:	024a      	lsls	r2, r1, #9
 80039f8:	4610      	mov	r0, r2
 80039fa:	4619      	mov	r1, r3
 80039fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039fe:	2200      	movs	r2, #0
 8003a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a08:	f7fc fffc 	bl	8000a04 <__aeabi_uldivmod>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4613      	mov	r3, r2
 8003a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a14:	e058      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a16:	4b38      	ldr	r3, [pc, #224]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	099b      	lsrs	r3, r3, #6
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	4611      	mov	r1, r2
 8003a22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a26:	623b      	str	r3, [r7, #32]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a30:	4642      	mov	r2, r8
 8003a32:	464b      	mov	r3, r9
 8003a34:	f04f 0000 	mov.w	r0, #0
 8003a38:	f04f 0100 	mov.w	r1, #0
 8003a3c:	0159      	lsls	r1, r3, #5
 8003a3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a42:	0150      	lsls	r0, r2, #5
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4641      	mov	r1, r8
 8003a4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a4e:	4649      	mov	r1, r9
 8003a50:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	f04f 0300 	mov.w	r3, #0
 8003a5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a68:	ebb2 040a 	subs.w	r4, r2, sl
 8003a6c:	eb63 050b 	sbc.w	r5, r3, fp
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	00eb      	lsls	r3, r5, #3
 8003a7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a7e:	00e2      	lsls	r2, r4, #3
 8003a80:	4614      	mov	r4, r2
 8003a82:	461d      	mov	r5, r3
 8003a84:	4643      	mov	r3, r8
 8003a86:	18e3      	adds	r3, r4, r3
 8003a88:	603b      	str	r3, [r7, #0]
 8003a8a:	464b      	mov	r3, r9
 8003a8c:	eb45 0303 	adc.w	r3, r5, r3
 8003a90:	607b      	str	r3, [r7, #4]
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	028b      	lsls	r3, r1, #10
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	028a      	lsls	r2, r1, #10
 8003aac:	4610      	mov	r0, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	61bb      	str	r3, [r7, #24]
 8003ab6:	61fa      	str	r2, [r7, #28]
 8003ab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003abc:	f7fc ffa2 	bl	8000a04 <__aeabi_uldivmod>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	0c1b      	lsrs	r3, r3, #16
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ad8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ae2:	e002      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCC_GetSysClockFreq+0x204>)
 8003ae6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3750      	adds	r7, #80	; 0x50
 8003af0:	46bd      	mov	sp, r7
 8003af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003af6:	bf00      	nop
 8003af8:	40023800 	.word	0x40023800
 8003afc:	00f42400 	.word	0x00f42400
 8003b00:	007a1200 	.word	0x007a1200

08003b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000064 	.word	0x20000064

08003b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b20:	f7ff fff0 	bl	8003b04 <HAL_RCC_GetHCLKFreq>
 8003b24:	4602      	mov	r2, r0
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	0a9b      	lsrs	r3, r3, #10
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	4903      	ldr	r1, [pc, #12]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b32:	5ccb      	ldrb	r3, [r1, r3]
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	08005b2c 	.word	0x08005b2c

08003b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b48:	f7ff ffdc 	bl	8003b04 <HAL_RCC_GetHCLKFreq>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	0b5b      	lsrs	r3, r3, #13
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	4903      	ldr	r1, [pc, #12]	; (8003b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b5a:	5ccb      	ldrb	r3, [r1, r3]
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40023800 	.word	0x40023800
 8003b68:	08005b2c 	.word	0x08005b2c

08003b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e041      	b.n	8003c02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fd ff7c 	bl	8001a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4610      	mov	r0, r2
 8003bac:	f000 fc78 	bl	80044a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e041      	b.n	8003ca0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7fd fef7 	bl	8001a24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f000 fc29 	bl	80044a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <HAL_TIM_PWM_Start+0x24>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	bf14      	ite	ne
 8003cc4:	2301      	movne	r3, #1
 8003cc6:	2300      	moveq	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	e022      	b.n	8003d12 <HAL_TIM_PWM_Start+0x6a>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d109      	bne.n	8003ce6 <HAL_TIM_PWM_Start+0x3e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	bf14      	ite	ne
 8003cde:	2301      	movne	r3, #1
 8003ce0:	2300      	moveq	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	e015      	b.n	8003d12 <HAL_TIM_PWM_Start+0x6a>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d109      	bne.n	8003d00 <HAL_TIM_PWM_Start+0x58>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e008      	b.n	8003d12 <HAL_TIM_PWM_Start+0x6a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	bf14      	ite	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	2300      	moveq	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e07c      	b.n	8003e14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d104      	bne.n	8003d2a <HAL_TIM_PWM_Start+0x82>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d28:	e013      	b.n	8003d52 <HAL_TIM_PWM_Start+0xaa>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d104      	bne.n	8003d3a <HAL_TIM_PWM_Start+0x92>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d38:	e00b      	b.n	8003d52 <HAL_TIM_PWM_Start+0xaa>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d104      	bne.n	8003d4a <HAL_TIM_PWM_Start+0xa2>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d48:	e003      	b.n	8003d52 <HAL_TIM_PWM_Start+0xaa>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2201      	movs	r2, #1
 8003d58:	6839      	ldr	r1, [r7, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fe8a 	bl	8004a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a2d      	ldr	r2, [pc, #180]	; (8003e1c <HAL_TIM_PWM_Start+0x174>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d004      	beq.n	8003d74 <HAL_TIM_PWM_Start+0xcc>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a2c      	ldr	r2, [pc, #176]	; (8003e20 <HAL_TIM_PWM_Start+0x178>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d101      	bne.n	8003d78 <HAL_TIM_PWM_Start+0xd0>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <HAL_TIM_PWM_Start+0xd2>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d007      	beq.n	8003d8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a22      	ldr	r2, [pc, #136]	; (8003e1c <HAL_TIM_PWM_Start+0x174>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d022      	beq.n	8003dde <HAL_TIM_PWM_Start+0x136>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da0:	d01d      	beq.n	8003dde <HAL_TIM_PWM_Start+0x136>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1f      	ldr	r2, [pc, #124]	; (8003e24 <HAL_TIM_PWM_Start+0x17c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d018      	beq.n	8003dde <HAL_TIM_PWM_Start+0x136>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1d      	ldr	r2, [pc, #116]	; (8003e28 <HAL_TIM_PWM_Start+0x180>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_TIM_PWM_Start+0x136>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1c      	ldr	r2, [pc, #112]	; (8003e2c <HAL_TIM_PWM_Start+0x184>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00e      	beq.n	8003dde <HAL_TIM_PWM_Start+0x136>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a16      	ldr	r2, [pc, #88]	; (8003e20 <HAL_TIM_PWM_Start+0x178>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d009      	beq.n	8003dde <HAL_TIM_PWM_Start+0x136>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a18      	ldr	r2, [pc, #96]	; (8003e30 <HAL_TIM_PWM_Start+0x188>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <HAL_TIM_PWM_Start+0x136>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <HAL_TIM_PWM_Start+0x18c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d111      	bne.n	8003e02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b06      	cmp	r3, #6
 8003dee:	d010      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e00:	e007      	b.n	8003e12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0201 	orr.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40010000 	.word	0x40010000
 8003e20:	40010400 	.word	0x40010400
 8003e24:	40000400 	.word	0x40000400
 8003e28:	40000800 	.word	0x40000800
 8003e2c:	40000c00 	.word	0x40000c00
 8003e30:	40014000 	.word	0x40014000
 8003e34:	40001800 	.word	0x40001800

08003e38 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2200      	movs	r2, #0
 8003e48:	6839      	ldr	r1, [r7, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fe12 	bl	8004a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a2e      	ldr	r2, [pc, #184]	; (8003f10 <HAL_TIM_PWM_Stop+0xd8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d004      	beq.n	8003e64 <HAL_TIM_PWM_Stop+0x2c>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2d      	ldr	r2, [pc, #180]	; (8003f14 <HAL_TIM_PWM_Stop+0xdc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d101      	bne.n	8003e68 <HAL_TIM_PWM_Stop+0x30>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <HAL_TIM_PWM_Stop+0x32>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d017      	beq.n	8003e9e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6a1a      	ldr	r2, [r3, #32]
 8003e74:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <HAL_TIM_PWM_Stop+0x66>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6a1a      	ldr	r2, [r3, #32]
 8003e84:	f240 4344 	movw	r3, #1092	; 0x444
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d107      	bne.n	8003e9e <HAL_TIM_PWM_Stop+0x66>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6a1a      	ldr	r2, [r3, #32]
 8003ea4:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10f      	bne.n	8003ece <HAL_TIM_PWM_Stop+0x96>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6a1a      	ldr	r2, [r3, #32]
 8003eb4:	f240 4344 	movw	r3, #1092	; 0x444
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d107      	bne.n	8003ece <HAL_TIM_PWM_Stop+0x96>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0201 	bic.w	r2, r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d104      	bne.n	8003ede <HAL_TIM_PWM_Stop+0xa6>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003edc:	e013      	b.n	8003f06 <HAL_TIM_PWM_Stop+0xce>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d104      	bne.n	8003eee <HAL_TIM_PWM_Stop+0xb6>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eec:	e00b      	b.n	8003f06 <HAL_TIM_PWM_Stop+0xce>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d104      	bne.n	8003efe <HAL_TIM_PWM_Stop+0xc6>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003efc:	e003      	b.n	8003f06 <HAL_TIM_PWM_Stop+0xce>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40010000 	.word	0x40010000
 8003f14:	40010400 	.word	0x40010400

08003f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d122      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d11b      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0202 	mvn.w	r2, #2
 8003f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fa81 	bl	8004462 <HAL_TIM_IC_CaptureCallback>
 8003f60:	e005      	b.n	8003f6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fa73 	bl	800444e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fa84 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d122      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d11b      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0204 	mvn.w	r2, #4
 8003f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fa57 	bl	8004462 <HAL_TIM_IC_CaptureCallback>
 8003fb4:	e005      	b.n	8003fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fa49 	bl	800444e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fa5a 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d122      	bne.n	800401c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d11b      	bne.n	800401c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0208 	mvn.w	r2, #8
 8003fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fa2d 	bl	8004462 <HAL_TIM_IC_CaptureCallback>
 8004008:	e005      	b.n	8004016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fa1f 	bl	800444e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fa30 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	2b10      	cmp	r3, #16
 8004028:	d122      	bne.n	8004070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b10      	cmp	r3, #16
 8004036:	d11b      	bne.n	8004070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0210 	mvn.w	r2, #16
 8004040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2208      	movs	r2, #8
 8004046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fa03 	bl	8004462 <HAL_TIM_IC_CaptureCallback>
 800405c:	e005      	b.n	800406a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f9f5 	bl	800444e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fa06 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d10e      	bne.n	800409c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b01      	cmp	r3, #1
 800408a:	d107      	bne.n	800409c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0201 	mvn.w	r2, #1
 8004094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f9cf 	bl	800443a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	2b80      	cmp	r3, #128	; 0x80
 80040a8:	d10e      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b4:	2b80      	cmp	r3, #128	; 0x80
 80040b6:	d107      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fdd4 	bl	8004c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d10e      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e0:	2b40      	cmp	r3, #64	; 0x40
 80040e2:	d107      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f9cb 	bl	800448a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d10e      	bne.n	8004120 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b20      	cmp	r3, #32
 800410e:	d107      	bne.n	8004120 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0220 	mvn.w	r2, #32
 8004118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fd9e 	bl	8004c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004120:	bf00      	nop
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004142:	2302      	movs	r3, #2
 8004144:	e0ae      	b.n	80042a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b0c      	cmp	r3, #12
 8004152:	f200 809f 	bhi.w	8004294 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004156:	a201      	add	r2, pc, #4	; (adr r2, 800415c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415c:	08004191 	.word	0x08004191
 8004160:	08004295 	.word	0x08004295
 8004164:	08004295 	.word	0x08004295
 8004168:	08004295 	.word	0x08004295
 800416c:	080041d1 	.word	0x080041d1
 8004170:	08004295 	.word	0x08004295
 8004174:	08004295 	.word	0x08004295
 8004178:	08004295 	.word	0x08004295
 800417c:	08004213 	.word	0x08004213
 8004180:	08004295 	.word	0x08004295
 8004184:	08004295 	.word	0x08004295
 8004188:	08004295 	.word	0x08004295
 800418c:	08004253 	.word	0x08004253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fa22 	bl	80045e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0208 	orr.w	r2, r2, #8
 80041aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0204 	bic.w	r2, r2, #4
 80041ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6999      	ldr	r1, [r3, #24]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	619a      	str	r2, [r3, #24]
      break;
 80041ce:	e064      	b.n	800429a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fa72 	bl	80046c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6999      	ldr	r1, [r3, #24]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	021a      	lsls	r2, r3, #8
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	619a      	str	r2, [r3, #24]
      break;
 8004210:	e043      	b.n	800429a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fac7 	bl	80047ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69da      	ldr	r2, [r3, #28]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0208 	orr.w	r2, r2, #8
 800422c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0204 	bic.w	r2, r2, #4
 800423c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69d9      	ldr	r1, [r3, #28]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	61da      	str	r2, [r3, #28]
      break;
 8004250:	e023      	b.n	800429a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	4618      	mov	r0, r3
 800425a:	f000 fb1b 	bl	8004894 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69da      	ldr	r2, [r3, #28]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800426c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69da      	ldr	r2, [r3, #28]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800427c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69d9      	ldr	r1, [r3, #28]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	021a      	lsls	r2, r3, #8
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	61da      	str	r2, [r3, #28]
      break;
 8004292:	e002      	b.n	800429a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	75fb      	strb	r3, [r7, #23]
      break;
 8004298:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_TIM_ConfigClockSource+0x1c>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e0b4      	b.n	8004432 <HAL_TIM_ConfigClockSource+0x186>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004300:	d03e      	beq.n	8004380 <HAL_TIM_ConfigClockSource+0xd4>
 8004302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004306:	f200 8087 	bhi.w	8004418 <HAL_TIM_ConfigClockSource+0x16c>
 800430a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430e:	f000 8086 	beq.w	800441e <HAL_TIM_ConfigClockSource+0x172>
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004316:	d87f      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x16c>
 8004318:	2b70      	cmp	r3, #112	; 0x70
 800431a:	d01a      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0xa6>
 800431c:	2b70      	cmp	r3, #112	; 0x70
 800431e:	d87b      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x16c>
 8004320:	2b60      	cmp	r3, #96	; 0x60
 8004322:	d050      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x11a>
 8004324:	2b60      	cmp	r3, #96	; 0x60
 8004326:	d877      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x16c>
 8004328:	2b50      	cmp	r3, #80	; 0x50
 800432a:	d03c      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0xfa>
 800432c:	2b50      	cmp	r3, #80	; 0x50
 800432e:	d873      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x16c>
 8004330:	2b40      	cmp	r3, #64	; 0x40
 8004332:	d058      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0x13a>
 8004334:	2b40      	cmp	r3, #64	; 0x40
 8004336:	d86f      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x16c>
 8004338:	2b30      	cmp	r3, #48	; 0x30
 800433a:	d064      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x15a>
 800433c:	2b30      	cmp	r3, #48	; 0x30
 800433e:	d86b      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x16c>
 8004340:	2b20      	cmp	r3, #32
 8004342:	d060      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x15a>
 8004344:	2b20      	cmp	r3, #32
 8004346:	d867      	bhi.n	8004418 <HAL_TIM_ConfigClockSource+0x16c>
 8004348:	2b00      	cmp	r3, #0
 800434a:	d05c      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x15a>
 800434c:	2b10      	cmp	r3, #16
 800434e:	d05a      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x15a>
 8004350:	e062      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	6899      	ldr	r1, [r3, #8]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f000 fb67 	bl	8004a34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	609a      	str	r2, [r3, #8]
      break;
 800437e:	e04f      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	6899      	ldr	r1, [r3, #8]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f000 fb50 	bl	8004a34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043a2:	609a      	str	r2, [r3, #8]
      break;
 80043a4:	e03c      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6859      	ldr	r1, [r3, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f000 fac4 	bl	8004940 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2150      	movs	r1, #80	; 0x50
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fb1d 	bl	80049fe <TIM_ITRx_SetConfig>
      break;
 80043c4:	e02c      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6859      	ldr	r1, [r3, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	461a      	mov	r2, r3
 80043d4:	f000 fae3 	bl	800499e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2160      	movs	r1, #96	; 0x60
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fb0d 	bl	80049fe <TIM_ITRx_SetConfig>
      break;
 80043e4:	e01c      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6859      	ldr	r1, [r3, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	461a      	mov	r2, r3
 80043f4:	f000 faa4 	bl	8004940 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2140      	movs	r1, #64	; 0x40
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fafd 	bl	80049fe <TIM_ITRx_SetConfig>
      break;
 8004404:	e00c      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4619      	mov	r1, r3
 8004410:	4610      	mov	r0, r2
 8004412:	f000 faf4 	bl	80049fe <TIM_ITRx_SetConfig>
      break;
 8004416:	e003      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	73fb      	strb	r3, [r7, #15]
      break;
 800441c:	e000      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800441e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004430:	7bfb      	ldrb	r3, [r7, #15]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a40      	ldr	r2, [pc, #256]	; (80045b4 <TIM_Base_SetConfig+0x114>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d013      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044be:	d00f      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a3d      	ldr	r2, [pc, #244]	; (80045b8 <TIM_Base_SetConfig+0x118>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00b      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a3c      	ldr	r2, [pc, #240]	; (80045bc <TIM_Base_SetConfig+0x11c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d007      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3b      	ldr	r2, [pc, #236]	; (80045c0 <TIM_Base_SetConfig+0x120>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d003      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3a      	ldr	r2, [pc, #232]	; (80045c4 <TIM_Base_SetConfig+0x124>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d108      	bne.n	80044f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a2f      	ldr	r2, [pc, #188]	; (80045b4 <TIM_Base_SetConfig+0x114>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d02b      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004500:	d027      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2c      	ldr	r2, [pc, #176]	; (80045b8 <TIM_Base_SetConfig+0x118>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d023      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2b      	ldr	r2, [pc, #172]	; (80045bc <TIM_Base_SetConfig+0x11c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d01f      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2a      	ldr	r2, [pc, #168]	; (80045c0 <TIM_Base_SetConfig+0x120>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d01b      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a29      	ldr	r2, [pc, #164]	; (80045c4 <TIM_Base_SetConfig+0x124>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d017      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a28      	ldr	r2, [pc, #160]	; (80045c8 <TIM_Base_SetConfig+0x128>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d013      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a27      	ldr	r2, [pc, #156]	; (80045cc <TIM_Base_SetConfig+0x12c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00f      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a26      	ldr	r2, [pc, #152]	; (80045d0 <TIM_Base_SetConfig+0x130>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00b      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a25      	ldr	r2, [pc, #148]	; (80045d4 <TIM_Base_SetConfig+0x134>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d007      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a24      	ldr	r2, [pc, #144]	; (80045d8 <TIM_Base_SetConfig+0x138>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d003      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a23      	ldr	r2, [pc, #140]	; (80045dc <TIM_Base_SetConfig+0x13c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d108      	bne.n	8004564 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4313      	orrs	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a0a      	ldr	r2, [pc, #40]	; (80045b4 <TIM_Base_SetConfig+0x114>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d003      	beq.n	8004598 <TIM_Base_SetConfig+0xf8>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a0c      	ldr	r2, [pc, #48]	; (80045c4 <TIM_Base_SetConfig+0x124>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d103      	bne.n	80045a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	615a      	str	r2, [r3, #20]
}
 80045a6:	bf00      	nop
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40010000 	.word	0x40010000
 80045b8:	40000400 	.word	0x40000400
 80045bc:	40000800 	.word	0x40000800
 80045c0:	40000c00 	.word	0x40000c00
 80045c4:	40010400 	.word	0x40010400
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40014400 	.word	0x40014400
 80045d0:	40014800 	.word	0x40014800
 80045d4:	40001800 	.word	0x40001800
 80045d8:	40001c00 	.word	0x40001c00
 80045dc:	40002000 	.word	0x40002000

080045e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f023 0201 	bic.w	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0303 	bic.w	r3, r3, #3
 8004616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f023 0302 	bic.w	r3, r3, #2
 8004628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a20      	ldr	r2, [pc, #128]	; (80046b8 <TIM_OC1_SetConfig+0xd8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d003      	beq.n	8004644 <TIM_OC1_SetConfig+0x64>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a1f      	ldr	r2, [pc, #124]	; (80046bc <TIM_OC1_SetConfig+0xdc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d10c      	bne.n	800465e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f023 0308 	bic.w	r3, r3, #8
 800464a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f023 0304 	bic.w	r3, r3, #4
 800465c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a15      	ldr	r2, [pc, #84]	; (80046b8 <TIM_OC1_SetConfig+0xd8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d003      	beq.n	800466e <TIM_OC1_SetConfig+0x8e>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a14      	ldr	r2, [pc, #80]	; (80046bc <TIM_OC1_SetConfig+0xdc>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d111      	bne.n	8004692 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800467c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	621a      	str	r2, [r3, #32]
}
 80046ac:	bf00      	nop
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40010000 	.word	0x40010000
 80046bc:	40010400 	.word	0x40010400

080046c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f023 0210 	bic.w	r2, r3, #16
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	021b      	lsls	r3, r3, #8
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f023 0320 	bic.w	r3, r3, #32
 800470a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	4313      	orrs	r3, r2
 8004716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a22      	ldr	r2, [pc, #136]	; (80047a4 <TIM_OC2_SetConfig+0xe4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d003      	beq.n	8004728 <TIM_OC2_SetConfig+0x68>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a21      	ldr	r2, [pc, #132]	; (80047a8 <TIM_OC2_SetConfig+0xe8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d10d      	bne.n	8004744 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800472e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4313      	orrs	r3, r2
 800473a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004742:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a17      	ldr	r2, [pc, #92]	; (80047a4 <TIM_OC2_SetConfig+0xe4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d003      	beq.n	8004754 <TIM_OC2_SetConfig+0x94>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a16      	ldr	r2, [pc, #88]	; (80047a8 <TIM_OC2_SetConfig+0xe8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d113      	bne.n	800477c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800475a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	621a      	str	r2, [r3, #32]
}
 8004796:	bf00      	nop
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40010000 	.word	0x40010000
 80047a8:	40010400 	.word	0x40010400

080047ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0303 	bic.w	r3, r3, #3
 80047e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	4313      	orrs	r3, r2
 8004800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a21      	ldr	r2, [pc, #132]	; (800488c <TIM_OC3_SetConfig+0xe0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d003      	beq.n	8004812 <TIM_OC3_SetConfig+0x66>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a20      	ldr	r2, [pc, #128]	; (8004890 <TIM_OC3_SetConfig+0xe4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d10d      	bne.n	800482e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800482c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a16      	ldr	r2, [pc, #88]	; (800488c <TIM_OC3_SetConfig+0xe0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d003      	beq.n	800483e <TIM_OC3_SetConfig+0x92>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a15      	ldr	r2, [pc, #84]	; (8004890 <TIM_OC3_SetConfig+0xe4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d113      	bne.n	8004866 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800484c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	621a      	str	r2, [r3, #32]
}
 8004880:	bf00      	nop
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	40010000 	.word	0x40010000
 8004890:	40010400 	.word	0x40010400

08004894 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	031b      	lsls	r3, r3, #12
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a12      	ldr	r2, [pc, #72]	; (8004938 <TIM_OC4_SetConfig+0xa4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_OC4_SetConfig+0x68>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a11      	ldr	r2, [pc, #68]	; (800493c <TIM_OC4_SetConfig+0xa8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d109      	bne.n	8004910 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	019b      	lsls	r3, r3, #6
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	621a      	str	r2, [r3, #32]
}
 800492a:	bf00      	nop
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40010000 	.word	0x40010000
 800493c:	40010400 	.word	0x40010400

08004940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	f023 0201 	bic.w	r2, r3, #1
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800496a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4313      	orrs	r3, r2
 8004974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f023 030a 	bic.w	r3, r3, #10
 800497c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4313      	orrs	r3, r2
 8004984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800499e:	b480      	push	{r7}
 80049a0:	b087      	sub	sp, #28
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f023 0210 	bic.w	r2, r3, #16
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	031b      	lsls	r3, r3, #12
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	621a      	str	r2, [r3, #32]
}
 80049f2:	bf00      	nop
 80049f4:	371c      	adds	r7, #28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b085      	sub	sp, #20
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f043 0307 	orr.w	r3, r3, #7
 8004a20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	609a      	str	r2, [r3, #8]
}
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	021a      	lsls	r2, r3, #8
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	609a      	str	r2, [r3, #8]
}
 8004a68:	bf00      	nop
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 031f 	and.w	r3, r3, #31
 8004a86:	2201      	movs	r2, #1
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a1a      	ldr	r2, [r3, #32]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	43db      	mvns	r3, r3
 8004a96:	401a      	ands	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a1a      	ldr	r2, [r3, #32]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f003 031f 	and.w	r3, r3, #31
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aac:	431a      	orrs	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	621a      	str	r2, [r3, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
	...

08004ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e05a      	b.n	8004b8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d022      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b24:	d01d      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a1d      	ldr	r2, [pc, #116]	; (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d018      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a1b      	ldr	r2, [pc, #108]	; (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d013      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a1a      	ldr	r2, [pc, #104]	; (8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00e      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a18      	ldr	r2, [pc, #96]	; (8004bac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d009      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a17      	ldr	r2, [pc, #92]	; (8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a15      	ldr	r2, [pc, #84]	; (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d10c      	bne.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40010000 	.word	0x40010000
 8004ba0:	40000400 	.word	0x40000400
 8004ba4:	40000800 	.word	0x40000800
 8004ba8:	40000c00 	.word	0x40000c00
 8004bac:	40010400 	.word	0x40010400
 8004bb0:	40014000 	.word	0x40014000
 8004bb4:	40001800 	.word	0x40001800

08004bb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e03d      	b.n	8004c50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e03f      	b.n	8004d16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fc ff7a 	bl	8001ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2224      	movs	r2, #36	; 0x24
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fc7b 	bl	80055c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695a      	ldr	r2, [r3, #20]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b0ba      	sub	sp, #232	; 0xe8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10f      	bne.n	8004d86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d009      	beq.n	8004d86 <HAL_UART_IRQHandler+0x66>
 8004d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fb65 	bl	800544e <UART_Receive_IT>
      return;
 8004d84:	e256      	b.n	8005234 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 80de 	beq.w	8004f4c <HAL_UART_IRQHandler+0x22c>
 8004d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 80d1 	beq.w	8004f4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00b      	beq.n	8004dce <HAL_UART_IRQHandler+0xae>
 8004db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f043 0201 	orr.w	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00b      	beq.n	8004df2 <HAL_UART_IRQHandler+0xd2>
 8004dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d005      	beq.n	8004df2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f043 0202 	orr.w	r2, r3, #2
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <HAL_UART_IRQHandler+0xf6>
 8004dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f043 0204 	orr.w	r2, r3, #4
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d011      	beq.n	8004e46 <HAL_UART_IRQHandler+0x126>
 8004e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e26:	f003 0320 	and.w	r3, r3, #32
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d105      	bne.n	8004e3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d005      	beq.n	8004e46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f043 0208 	orr.w	r2, r3, #8
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 81ed 	beq.w	800522a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_UART_IRQHandler+0x14e>
 8004e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e60:	f003 0320 	and.w	r3, r3, #32
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 faf0 	bl	800544e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b40      	cmp	r3, #64	; 0x40
 8004e7a:	bf0c      	ite	eq
 8004e7c:	2301      	moveq	r3, #1
 8004e7e:	2300      	movne	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d103      	bne.n	8004e9a <HAL_UART_IRQHandler+0x17a>
 8004e92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d04f      	beq.n	8004f3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f9f8 	bl	8005290 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eaa:	2b40      	cmp	r3, #64	; 0x40
 8004eac:	d141      	bne.n	8004f32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3314      	adds	r3, #20
 8004eb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ebc:	e853 3f00 	ldrex	r3, [r3]
 8004ec0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3314      	adds	r3, #20
 8004ed6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004eda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ede:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ee6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ef2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1d9      	bne.n	8004eae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d013      	beq.n	8004f2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	4a7d      	ldr	r2, [pc, #500]	; (80050fc <HAL_UART_IRQHandler+0x3dc>)
 8004f08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fd ffbc 	bl	8002e8c <HAL_DMA_Abort_IT>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d016      	beq.n	8004f48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f24:	4610      	mov	r0, r2
 8004f26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f28:	e00e      	b.n	8004f48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f99a 	bl	8005264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f30:	e00a      	b.n	8004f48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f996 	bl	8005264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f38:	e006      	b.n	8004f48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f992 	bl	8005264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f46:	e170      	b.n	800522a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f48:	bf00      	nop
    return;
 8004f4a:	e16e      	b.n	800522a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	f040 814a 	bne.w	80051ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5a:	f003 0310 	and.w	r3, r3, #16
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8143 	beq.w	80051ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f68:	f003 0310 	and.w	r3, r3, #16
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 813c 	beq.w	80051ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f72:	2300      	movs	r3, #0
 8004f74:	60bb      	str	r3, [r7, #8]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	60bb      	str	r3, [r7, #8]
 8004f86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f92:	2b40      	cmp	r3, #64	; 0x40
 8004f94:	f040 80b4 	bne.w	8005100 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fa4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 8140 	beq.w	800522e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	f080 8139 	bcs.w	800522e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fc2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fce:	f000 8088 	beq.w	80050e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ffe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005002:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800500a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005016:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1d9      	bne.n	8004fd2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3314      	adds	r3, #20
 8005024:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800502e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005030:	f023 0301 	bic.w	r3, r3, #1
 8005034:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3314      	adds	r3, #20
 800503e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005042:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005046:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005048:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800504a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e1      	bne.n	800501e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3314      	adds	r3, #20
 8005060:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800506a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800506c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3314      	adds	r3, #20
 800507a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800507e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005080:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005084:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800508c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e3      	bne.n	800505a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	330c      	adds	r3, #12
 80050a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050aa:	e853 3f00 	ldrex	r3, [r3]
 80050ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050b2:	f023 0310 	bic.w	r3, r3, #16
 80050b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	330c      	adds	r3, #12
 80050c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80050c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80050c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e3      	bne.n	80050a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fd fe65 	bl	8002dac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	4619      	mov	r1, r3
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f8c0 	bl	8005278 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050f8:	e099      	b.n	800522e <HAL_UART_IRQHandler+0x50e>
 80050fa:	bf00      	nop
 80050fc:	08005357 	.word	0x08005357
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005108:	b29b      	uxth	r3, r3
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 808b 	beq.w	8005232 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800511c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 8086 	beq.w	8005232 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	330c      	adds	r3, #12
 800512c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005138:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800513c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	330c      	adds	r3, #12
 8005146:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800514a:	647a      	str	r2, [r7, #68]	; 0x44
 800514c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e3      	bne.n	8005126 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3314      	adds	r3, #20
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	623b      	str	r3, [r7, #32]
   return(result);
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	f023 0301 	bic.w	r3, r3, #1
 8005174:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3314      	adds	r3, #20
 800517e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005182:	633a      	str	r2, [r7, #48]	; 0x30
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e3      	bne.n	800515e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	330c      	adds	r3, #12
 80051aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	e853 3f00 	ldrex	r3, [r3]
 80051b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0310 	bic.w	r3, r3, #16
 80051ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	330c      	adds	r3, #12
 80051c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051c8:	61fa      	str	r2, [r7, #28]
 80051ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	69b9      	ldr	r1, [r7, #24]
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	617b      	str	r3, [r7, #20]
   return(result);
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e3      	bne.n	80051a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f848 	bl	8005278 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051e8:	e023      	b.n	8005232 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <HAL_UART_IRQHandler+0x4ea>
 80051f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f8bb 	bl	800537e <UART_Transmit_IT>
    return;
 8005208:	e014      	b.n	8005234 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800520a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00e      	beq.n	8005234 <HAL_UART_IRQHandler+0x514>
 8005216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800521a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	d008      	beq.n	8005234 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f8fb 	bl	800541e <UART_EndTransmit_IT>
    return;
 8005228:	e004      	b.n	8005234 <HAL_UART_IRQHandler+0x514>
    return;
 800522a:	bf00      	nop
 800522c:	e002      	b.n	8005234 <HAL_UART_IRQHandler+0x514>
      return;
 800522e:	bf00      	nop
 8005230:	e000      	b.n	8005234 <HAL_UART_IRQHandler+0x514>
      return;
 8005232:	bf00      	nop
  }
}
 8005234:	37e8      	adds	r7, #232	; 0xe8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop

0800523c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005290:	b480      	push	{r7}
 8005292:	b095      	sub	sp, #84	; 0x54
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	330c      	adds	r3, #12
 800529e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a2:	e853 3f00 	ldrex	r3, [r3]
 80052a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	330c      	adds	r3, #12
 80052b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052b8:	643a      	str	r2, [r7, #64]	; 0x40
 80052ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e5      	bne.n	8005298 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3314      	adds	r3, #20
 80052d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	61fb      	str	r3, [r7, #28]
   return(result);
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f023 0301 	bic.w	r3, r3, #1
 80052e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3314      	adds	r3, #20
 80052ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e5      	bne.n	80052cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	2b01      	cmp	r3, #1
 8005306:	d119      	bne.n	800533c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	60bb      	str	r3, [r7, #8]
   return(result);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f023 0310 	bic.w	r3, r3, #16
 800531e:	647b      	str	r3, [r7, #68]	; 0x44
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	330c      	adds	r3, #12
 8005326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005328:	61ba      	str	r2, [r7, #24]
 800532a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6979      	ldr	r1, [r7, #20]
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	613b      	str	r3, [r7, #16]
   return(result);
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e5      	bne.n	8005308 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	631a      	str	r2, [r3, #48]	; 0x30
}
 800534a:	bf00      	nop
 800534c:	3754      	adds	r7, #84	; 0x54
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f7ff ff77 	bl	8005264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005376:	bf00      	nop
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800537e:	b480      	push	{r7}
 8005380:	b085      	sub	sp, #20
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b21      	cmp	r3, #33	; 0x21
 8005390:	d13e      	bne.n	8005410 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539a:	d114      	bne.n	80053c6 <UART_Transmit_IT+0x48>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d110      	bne.n	80053c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	1c9a      	adds	r2, r3, #2
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	621a      	str	r2, [r3, #32]
 80053c4:	e008      	b.n	80053d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	1c59      	adds	r1, r3, #1
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6211      	str	r1, [r2, #32]
 80053d0:	781a      	ldrb	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053dc:	b29b      	uxth	r3, r3
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	4619      	mov	r1, r3
 80053e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10f      	bne.n	800540c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800540a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800540c:	2300      	movs	r3, #0
 800540e:	e000      	b.n	8005412 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005410:	2302      	movs	r3, #2
  }
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005434:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff fefc 	bl	800523c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b08c      	sub	sp, #48	; 0x30
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b22      	cmp	r3, #34	; 0x22
 8005460:	f040 80ab 	bne.w	80055ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546c:	d117      	bne.n	800549e <UART_Receive_IT+0x50>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d113      	bne.n	800549e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005476:	2300      	movs	r3, #0
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	b29b      	uxth	r3, r3
 8005488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548c:	b29a      	uxth	r2, r3
 800548e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005490:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005496:	1c9a      	adds	r2, r3, #2
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	629a      	str	r2, [r3, #40]	; 0x28
 800549c:	e026      	b.n	80054ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b0:	d007      	beq.n	80054c2 <UART_Receive_IT+0x74>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10a      	bne.n	80054d0 <UART_Receive_IT+0x82>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	e008      	b.n	80054e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	4619      	mov	r1, r3
 80054fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d15a      	bne.n	80055b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0220 	bic.w	r2, r2, #32
 800550e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800551e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695a      	ldr	r2, [r3, #20]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0201 	bic.w	r2, r2, #1
 800552e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	2b01      	cmp	r3, #1
 800553e:	d135      	bne.n	80055ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	330c      	adds	r3, #12
 800554c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	613b      	str	r3, [r7, #16]
   return(result);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f023 0310 	bic.w	r3, r3, #16
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	330c      	adds	r3, #12
 8005564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005566:	623a      	str	r2, [r7, #32]
 8005568:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	69f9      	ldr	r1, [r7, #28]
 800556c:	6a3a      	ldr	r2, [r7, #32]
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	61bb      	str	r3, [r7, #24]
   return(result);
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e5      	bne.n	8005546 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0310 	and.w	r3, r3, #16
 8005584:	2b10      	cmp	r3, #16
 8005586:	d10a      	bne.n	800559e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055a2:	4619      	mov	r1, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff fe67 	bl	8005278 <HAL_UARTEx_RxEventCallback>
 80055aa:	e002      	b.n	80055b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff fe4f 	bl	8005250 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	e002      	b.n	80055bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	e000      	b.n	80055bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80055ba:	2302      	movs	r3, #2
  }
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3730      	adds	r7, #48	; 0x30
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c8:	b0c0      	sub	sp, #256	; 0x100
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	68d9      	ldr	r1, [r3, #12]
 80055e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	ea40 0301 	orr.w	r3, r0, r1
 80055ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	431a      	orrs	r2, r3
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800561c:	f021 010c 	bic.w	r1, r1, #12
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800562a:	430b      	orrs	r3, r1
 800562c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800562e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800563a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563e:	6999      	ldr	r1, [r3, #24]
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	ea40 0301 	orr.w	r3, r0, r1
 800564a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4b8f      	ldr	r3, [pc, #572]	; (8005890 <UART_SetConfig+0x2cc>)
 8005654:	429a      	cmp	r2, r3
 8005656:	d005      	beq.n	8005664 <UART_SetConfig+0xa0>
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	4b8d      	ldr	r3, [pc, #564]	; (8005894 <UART_SetConfig+0x2d0>)
 8005660:	429a      	cmp	r2, r3
 8005662:	d104      	bne.n	800566e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005664:	f7fe fa6e 	bl	8003b44 <HAL_RCC_GetPCLK2Freq>
 8005668:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800566c:	e003      	b.n	8005676 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800566e:	f7fe fa55 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 8005672:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005680:	f040 810c 	bne.w	800589c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005688:	2200      	movs	r2, #0
 800568a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800568e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005692:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005696:	4622      	mov	r2, r4
 8005698:	462b      	mov	r3, r5
 800569a:	1891      	adds	r1, r2, r2
 800569c:	65b9      	str	r1, [r7, #88]	; 0x58
 800569e:	415b      	adcs	r3, r3
 80056a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056a6:	4621      	mov	r1, r4
 80056a8:	eb12 0801 	adds.w	r8, r2, r1
 80056ac:	4629      	mov	r1, r5
 80056ae:	eb43 0901 	adc.w	r9, r3, r1
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056c6:	4690      	mov	r8, r2
 80056c8:	4699      	mov	r9, r3
 80056ca:	4623      	mov	r3, r4
 80056cc:	eb18 0303 	adds.w	r3, r8, r3
 80056d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056d4:	462b      	mov	r3, r5
 80056d6:	eb49 0303 	adc.w	r3, r9, r3
 80056da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056f2:	460b      	mov	r3, r1
 80056f4:	18db      	adds	r3, r3, r3
 80056f6:	653b      	str	r3, [r7, #80]	; 0x50
 80056f8:	4613      	mov	r3, r2
 80056fa:	eb42 0303 	adc.w	r3, r2, r3
 80056fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005700:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005704:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005708:	f7fb f97c 	bl	8000a04 <__aeabi_uldivmod>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4b61      	ldr	r3, [pc, #388]	; (8005898 <UART_SetConfig+0x2d4>)
 8005712:	fba3 2302 	umull	r2, r3, r3, r2
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	011c      	lsls	r4, r3, #4
 800571a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800571e:	2200      	movs	r2, #0
 8005720:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005724:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005728:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800572c:	4642      	mov	r2, r8
 800572e:	464b      	mov	r3, r9
 8005730:	1891      	adds	r1, r2, r2
 8005732:	64b9      	str	r1, [r7, #72]	; 0x48
 8005734:	415b      	adcs	r3, r3
 8005736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005738:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800573c:	4641      	mov	r1, r8
 800573e:	eb12 0a01 	adds.w	sl, r2, r1
 8005742:	4649      	mov	r1, r9
 8005744:	eb43 0b01 	adc.w	fp, r3, r1
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005754:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800575c:	4692      	mov	sl, r2
 800575e:	469b      	mov	fp, r3
 8005760:	4643      	mov	r3, r8
 8005762:	eb1a 0303 	adds.w	r3, sl, r3
 8005766:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800576a:	464b      	mov	r3, r9
 800576c:	eb4b 0303 	adc.w	r3, fp, r3
 8005770:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005780:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005784:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005788:	460b      	mov	r3, r1
 800578a:	18db      	adds	r3, r3, r3
 800578c:	643b      	str	r3, [r7, #64]	; 0x40
 800578e:	4613      	mov	r3, r2
 8005790:	eb42 0303 	adc.w	r3, r2, r3
 8005794:	647b      	str	r3, [r7, #68]	; 0x44
 8005796:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800579a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800579e:	f7fb f931 	bl	8000a04 <__aeabi_uldivmod>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4611      	mov	r1, r2
 80057a8:	4b3b      	ldr	r3, [pc, #236]	; (8005898 <UART_SetConfig+0x2d4>)
 80057aa:	fba3 2301 	umull	r2, r3, r3, r1
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	2264      	movs	r2, #100	; 0x64
 80057b2:	fb02 f303 	mul.w	r3, r2, r3
 80057b6:	1acb      	subs	r3, r1, r3
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057be:	4b36      	ldr	r3, [pc, #216]	; (8005898 <UART_SetConfig+0x2d4>)
 80057c0:	fba3 2302 	umull	r2, r3, r3, r2
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057cc:	441c      	add	r4, r3
 80057ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057e0:	4642      	mov	r2, r8
 80057e2:	464b      	mov	r3, r9
 80057e4:	1891      	adds	r1, r2, r2
 80057e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80057e8:	415b      	adcs	r3, r3
 80057ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057f0:	4641      	mov	r1, r8
 80057f2:	1851      	adds	r1, r2, r1
 80057f4:	6339      	str	r1, [r7, #48]	; 0x30
 80057f6:	4649      	mov	r1, r9
 80057f8:	414b      	adcs	r3, r1
 80057fa:	637b      	str	r3, [r7, #52]	; 0x34
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005808:	4659      	mov	r1, fp
 800580a:	00cb      	lsls	r3, r1, #3
 800580c:	4651      	mov	r1, sl
 800580e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005812:	4651      	mov	r1, sl
 8005814:	00ca      	lsls	r2, r1, #3
 8005816:	4610      	mov	r0, r2
 8005818:	4619      	mov	r1, r3
 800581a:	4603      	mov	r3, r0
 800581c:	4642      	mov	r2, r8
 800581e:	189b      	adds	r3, r3, r2
 8005820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005824:	464b      	mov	r3, r9
 8005826:	460a      	mov	r2, r1
 8005828:	eb42 0303 	adc.w	r3, r2, r3
 800582c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800583c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005840:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005844:	460b      	mov	r3, r1
 8005846:	18db      	adds	r3, r3, r3
 8005848:	62bb      	str	r3, [r7, #40]	; 0x28
 800584a:	4613      	mov	r3, r2
 800584c:	eb42 0303 	adc.w	r3, r2, r3
 8005850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005852:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005856:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800585a:	f7fb f8d3 	bl	8000a04 <__aeabi_uldivmod>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <UART_SetConfig+0x2d4>)
 8005864:	fba3 1302 	umull	r1, r3, r3, r2
 8005868:	095b      	lsrs	r3, r3, #5
 800586a:	2164      	movs	r1, #100	; 0x64
 800586c:	fb01 f303 	mul.w	r3, r1, r3
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	3332      	adds	r3, #50	; 0x32
 8005876:	4a08      	ldr	r2, [pc, #32]	; (8005898 <UART_SetConfig+0x2d4>)
 8005878:	fba2 2303 	umull	r2, r3, r2, r3
 800587c:	095b      	lsrs	r3, r3, #5
 800587e:	f003 0207 	and.w	r2, r3, #7
 8005882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4422      	add	r2, r4
 800588a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800588c:	e105      	b.n	8005a9a <UART_SetConfig+0x4d6>
 800588e:	bf00      	nop
 8005890:	40011000 	.word	0x40011000
 8005894:	40011400 	.word	0x40011400
 8005898:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800589c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058a0:	2200      	movs	r2, #0
 80058a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058ae:	4642      	mov	r2, r8
 80058b0:	464b      	mov	r3, r9
 80058b2:	1891      	adds	r1, r2, r2
 80058b4:	6239      	str	r1, [r7, #32]
 80058b6:	415b      	adcs	r3, r3
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058be:	4641      	mov	r1, r8
 80058c0:	1854      	adds	r4, r2, r1
 80058c2:	4649      	mov	r1, r9
 80058c4:	eb43 0501 	adc.w	r5, r3, r1
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	00eb      	lsls	r3, r5, #3
 80058d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058d6:	00e2      	lsls	r2, r4, #3
 80058d8:	4614      	mov	r4, r2
 80058da:	461d      	mov	r5, r3
 80058dc:	4643      	mov	r3, r8
 80058de:	18e3      	adds	r3, r4, r3
 80058e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058e4:	464b      	mov	r3, r9
 80058e6:	eb45 0303 	adc.w	r3, r5, r3
 80058ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800590a:	4629      	mov	r1, r5
 800590c:	008b      	lsls	r3, r1, #2
 800590e:	4621      	mov	r1, r4
 8005910:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005914:	4621      	mov	r1, r4
 8005916:	008a      	lsls	r2, r1, #2
 8005918:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800591c:	f7fb f872 	bl	8000a04 <__aeabi_uldivmod>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4b60      	ldr	r3, [pc, #384]	; (8005aa8 <UART_SetConfig+0x4e4>)
 8005926:	fba3 2302 	umull	r2, r3, r3, r2
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	011c      	lsls	r4, r3, #4
 800592e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005932:	2200      	movs	r2, #0
 8005934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005938:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800593c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005940:	4642      	mov	r2, r8
 8005942:	464b      	mov	r3, r9
 8005944:	1891      	adds	r1, r2, r2
 8005946:	61b9      	str	r1, [r7, #24]
 8005948:	415b      	adcs	r3, r3
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005950:	4641      	mov	r1, r8
 8005952:	1851      	adds	r1, r2, r1
 8005954:	6139      	str	r1, [r7, #16]
 8005956:	4649      	mov	r1, r9
 8005958:	414b      	adcs	r3, r1
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005968:	4659      	mov	r1, fp
 800596a:	00cb      	lsls	r3, r1, #3
 800596c:	4651      	mov	r1, sl
 800596e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005972:	4651      	mov	r1, sl
 8005974:	00ca      	lsls	r2, r1, #3
 8005976:	4610      	mov	r0, r2
 8005978:	4619      	mov	r1, r3
 800597a:	4603      	mov	r3, r0
 800597c:	4642      	mov	r2, r8
 800597e:	189b      	adds	r3, r3, r2
 8005980:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005984:	464b      	mov	r3, r9
 8005986:	460a      	mov	r2, r1
 8005988:	eb42 0303 	adc.w	r3, r2, r3
 800598c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	67bb      	str	r3, [r7, #120]	; 0x78
 800599a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059a8:	4649      	mov	r1, r9
 80059aa:	008b      	lsls	r3, r1, #2
 80059ac:	4641      	mov	r1, r8
 80059ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059b2:	4641      	mov	r1, r8
 80059b4:	008a      	lsls	r2, r1, #2
 80059b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059ba:	f7fb f823 	bl	8000a04 <__aeabi_uldivmod>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4b39      	ldr	r3, [pc, #228]	; (8005aa8 <UART_SetConfig+0x4e4>)
 80059c4:	fba3 1302 	umull	r1, r3, r3, r2
 80059c8:	095b      	lsrs	r3, r3, #5
 80059ca:	2164      	movs	r1, #100	; 0x64
 80059cc:	fb01 f303 	mul.w	r3, r1, r3
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	3332      	adds	r3, #50	; 0x32
 80059d6:	4a34      	ldr	r2, [pc, #208]	; (8005aa8 <UART_SetConfig+0x4e4>)
 80059d8:	fba2 2303 	umull	r2, r3, r2, r3
 80059dc:	095b      	lsrs	r3, r3, #5
 80059de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059e2:	441c      	add	r4, r3
 80059e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059e8:	2200      	movs	r2, #0
 80059ea:	673b      	str	r3, [r7, #112]	; 0x70
 80059ec:	677a      	str	r2, [r7, #116]	; 0x74
 80059ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059f2:	4642      	mov	r2, r8
 80059f4:	464b      	mov	r3, r9
 80059f6:	1891      	adds	r1, r2, r2
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	415b      	adcs	r3, r3
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a02:	4641      	mov	r1, r8
 8005a04:	1851      	adds	r1, r2, r1
 8005a06:	6039      	str	r1, [r7, #0]
 8005a08:	4649      	mov	r1, r9
 8005a0a:	414b      	adcs	r3, r1
 8005a0c:	607b      	str	r3, [r7, #4]
 8005a0e:	f04f 0200 	mov.w	r2, #0
 8005a12:	f04f 0300 	mov.w	r3, #0
 8005a16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a1a:	4659      	mov	r1, fp
 8005a1c:	00cb      	lsls	r3, r1, #3
 8005a1e:	4651      	mov	r1, sl
 8005a20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a24:	4651      	mov	r1, sl
 8005a26:	00ca      	lsls	r2, r1, #3
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	4642      	mov	r2, r8
 8005a30:	189b      	adds	r3, r3, r2
 8005a32:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a34:	464b      	mov	r3, r9
 8005a36:	460a      	mov	r2, r1
 8005a38:	eb42 0303 	adc.w	r3, r2, r3
 8005a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	663b      	str	r3, [r7, #96]	; 0x60
 8005a48:	667a      	str	r2, [r7, #100]	; 0x64
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a56:	4649      	mov	r1, r9
 8005a58:	008b      	lsls	r3, r1, #2
 8005a5a:	4641      	mov	r1, r8
 8005a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a60:	4641      	mov	r1, r8
 8005a62:	008a      	lsls	r2, r1, #2
 8005a64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a68:	f7fa ffcc 	bl	8000a04 <__aeabi_uldivmod>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <UART_SetConfig+0x4e4>)
 8005a72:	fba3 1302 	umull	r1, r3, r3, r2
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	2164      	movs	r1, #100	; 0x64
 8005a7a:	fb01 f303 	mul.w	r3, r1, r3
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	011b      	lsls	r3, r3, #4
 8005a82:	3332      	adds	r3, #50	; 0x32
 8005a84:	4a08      	ldr	r2, [pc, #32]	; (8005aa8 <UART_SetConfig+0x4e4>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	f003 020f 	and.w	r2, r3, #15
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4422      	add	r2, r4
 8005a98:	609a      	str	r2, [r3, #8]
}
 8005a9a:	bf00      	nop
 8005a9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aa6:	bf00      	nop
 8005aa8:	51eb851f 	.word	0x51eb851f

08005aac <__libc_init_array>:
 8005aac:	b570      	push	{r4, r5, r6, lr}
 8005aae:	4d0d      	ldr	r5, [pc, #52]	; (8005ae4 <__libc_init_array+0x38>)
 8005ab0:	4c0d      	ldr	r4, [pc, #52]	; (8005ae8 <__libc_init_array+0x3c>)
 8005ab2:	1b64      	subs	r4, r4, r5
 8005ab4:	10a4      	asrs	r4, r4, #2
 8005ab6:	2600      	movs	r6, #0
 8005ab8:	42a6      	cmp	r6, r4
 8005aba:	d109      	bne.n	8005ad0 <__libc_init_array+0x24>
 8005abc:	4d0b      	ldr	r5, [pc, #44]	; (8005aec <__libc_init_array+0x40>)
 8005abe:	4c0c      	ldr	r4, [pc, #48]	; (8005af0 <__libc_init_array+0x44>)
 8005ac0:	f000 f820 	bl	8005b04 <_init>
 8005ac4:	1b64      	subs	r4, r4, r5
 8005ac6:	10a4      	asrs	r4, r4, #2
 8005ac8:	2600      	movs	r6, #0
 8005aca:	42a6      	cmp	r6, r4
 8005acc:	d105      	bne.n	8005ada <__libc_init_array+0x2e>
 8005ace:	bd70      	pop	{r4, r5, r6, pc}
 8005ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad4:	4798      	blx	r3
 8005ad6:	3601      	adds	r6, #1
 8005ad8:	e7ee      	b.n	8005ab8 <__libc_init_array+0xc>
 8005ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ade:	4798      	blx	r3
 8005ae0:	3601      	adds	r6, #1
 8005ae2:	e7f2      	b.n	8005aca <__libc_init_array+0x1e>
 8005ae4:	08005b3c 	.word	0x08005b3c
 8005ae8:	08005b3c 	.word	0x08005b3c
 8005aec:	08005b3c 	.word	0x08005b3c
 8005af0:	08005b40 	.word	0x08005b40

08005af4 <memset>:
 8005af4:	4402      	add	r2, r0
 8005af6:	4603      	mov	r3, r0
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d100      	bne.n	8005afe <memset+0xa>
 8005afc:	4770      	bx	lr
 8005afe:	f803 1b01 	strb.w	r1, [r3], #1
 8005b02:	e7f9      	b.n	8005af8 <memset+0x4>

08005b04 <_init>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	bf00      	nop
 8005b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0a:	bc08      	pop	{r3}
 8005b0c:	469e      	mov	lr, r3
 8005b0e:	4770      	bx	lr

08005b10 <_fini>:
 8005b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b12:	bf00      	nop
 8005b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b16:	bc08      	pop	{r3}
 8005b18:	469e      	mov	lr, r3
 8005b1a:	4770      	bx	lr
